// ********************************************************************
//
// Copyright (C) 1994-2016 Synopsys, Inc. All rights reserved. This Synopsys software and all associated documentation are proprietary to Synopsys, Inc. and may only be used pursuant to the terms and conditions of a written license agreement with Synopsys, Inc. All other use, reproduction, modification, or distribution of the Synopsys software or the associated documentation is strictly prohibited.

// This code was generated by Synopsys's Synphony Model Compiler product and
// is intended for use solely by licensed users of this product.

// VERILOG created by Synphony Model Compiler L-2016.03, Build 2009R, Feb 25 2016
// Date written:             Sat Apr 22 18:38:11 2017

// ********************************************************************

// Generated from /afs/asu.edu/users/t/x/i/txia13/FPGA/Final Project/MLP_Final_Golden.slx Version 1.4 Last modified date Sat Apr 22 18:24:40 2017
module Subsystem_New_Activation_Gold (
  input clkDiv10,
  input GlobalEnable10,
  input GlobalReset,
  output [31:0] Out1, // sfix32_En16
  input [31:0] In1 // sfix32_En16
);
wire [0:0] N_4;  
wire [0:0] N_24;  
wire [4:0] N_11;  
wire [4:0] N_26;  
wire [4:0] N_9;  
wire [4:0] N_71;  
wire [4:0] N_23;  
wire [4:0] N_27;  
wire [4:0] N_72;  
wire [4:0] N_80;  
wire [4:0] N_1;  
wire [4:0] N_12;  
wire [31:0] N_6;  
wire [31:0] N_81;  
wire [31:0] N_70;  
wire [31:0] N_79;  
wire [0:0] N_21;  
wire [0:0] N_78;  
wire [0:0] N_55;  
wire [0:0] N_52;  
wire [0:0] N_76;  
wire [0:0] N_77;  
wire [0:0] N_29;  
wire [0:0] N_17;  
wire [0:0] N_56;  
wire [0:0] N_22;  
wire [0:0] N_28;  
wire [0:0] N_8;  
wire [4:0] N_16;  
wire [4:0] N_31;  
wire [4:0] N_5;  
wire [4:0] N_75;  
wire [31:0] N_20;  
wire [4:0] N_32;  
wire [4:0] N_41;  
wire [31:0] N_85;  
wire [31:0] N_83;  
wire [31:0] N_58;  
wire [31:0] N_57;  
wire [31:0] N_34;  
wire [31:0] N_18;  
wire [31:0] N_19;  
wire [31:0] N_7;  
wire [31:0] N_74;  
wire [31:0] N_82;  
wire [31:0] N_73;  
wire [31:0] N_30;  
wire [31:0] N_49;  
wire [31:0] N_50;  
wire [31:0] N_51;  
wire [31:0] N_2;  
wire [31:0] N_3;  
wire [31:0] N_35;  
wire [4:0] N_69;  
wire [31:0] N_66;  
wire [31:0] N_63;  
wire [31:0] N_38;  
wire [31:0] N_40;  
wire [31:0] N_39;  
wire [31:0] N_68;  
wire [31:0] N_67;  
wire [31:0] N_33;  
wire [31:0] N_43;  
wire [31:0] N_44;  
wire [31:0] N_45;  
wire [31:0] N_60;  
wire [31:0] N_61;  
wire [31:0] N_62;  
wire [31:0] N_65;  
wire [31:0] N_54;  
wire [31:0] N_59;  
wire [31:0] N_36;  
wire [31:0] N_14;  
wire [31:0] N_47;  
wire [31:0] N_64;  
wire [31:0] N_46;  
wire [31:0] N_53;  
wire [31:0] N_42;  
wire [31:0] N_10;  
wire [31:0] N_37;  
wire [31:0] N_15;  
wire [31:0] N_48;  
wire [31:0] N_13;  
wire [31:0] N_25;  
wire [31:0] N_84;  
wire [0:0] N_GlobalEnable10_SubSystem_Convert_AutoGen511_1_1158;  
wire [0:0] N_GlobalEnable10_0_1658;  
wire [31:0] N_In1_0_1659;  
wire [31:0] N_Out1_1_1660;  
wire GlobalResetSel;
wire GlobalEnable1;
  assign GlobalEnable1 = GlobalEnable10;
assign Out1 = N_84;
  assign N_20 = In1;
  assign N_GlobalEnable10_SubSystem_Convert_AutoGen511_1_1158 = GlobalEnable10;
  generate
  begin: Add1_block
    wire enab;
    wire [1:0] tmpOut;
    wire  [1:0] tmp_N_4_0;
    wire  [1:0] tmp_N_24_1;
    wire [1:0] tmpOutPre;
    assign  enab= GlobalEnable10;
    assign tmp_N_4_0 = ($unsigned(N_4) << 0);
    assign tmp_N_24_1 = ($unsigned(N_24) << 0);
    assign  tmpOutPre =   tmp_N_4_0 + tmp_N_24_1;
    synDelayWithEnable #( .bitwidth(2), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clkDiv10), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(2), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_71) );
  end // Add1_block
  endgenerate
  generate
  begin: Add10_block
    wire enab;
    wire [5:0] tmpOut;
    wire  [5:0] tmp_N_11_0;
    wire  [5:0] tmp_N_26_1;
    wire [5:0] tmpOutPre;
    assign  enab= GlobalEnable10;
    assign tmp_N_11_0 = ($unsigned(N_11) << 0);
    assign tmp_N_26_1 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_11_0 + tmp_N_26_1;
    synDelayWithEnable #( .bitwidth(6), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clkDiv10), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(6), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_27) );
  end // Add10_block
  endgenerate
  generate
  begin: Add11_block
    wire enab;
    wire [5:0] tmpOut;
    wire  [5:0] tmp_N_9_0;
    wire  [5:0] tmp_N_71_1;
    wire [5:0] tmpOutPre;
    assign  enab= GlobalEnable10;
    assign tmp_N_9_0 = ($unsigned(N_9) << 0);
    assign tmp_N_71_1 = ($unsigned(N_71) << 0);
    assign  tmpOutPre =   tmp_N_9_0 + tmp_N_71_1;
    synDelayWithEnable #( .bitwidth(6), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clkDiv10), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(6), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_23) );
  end // Add11_block
  endgenerate
  generate
  begin: Add12_block
    wire enab;
    wire [5:0] tmpOut;
    wire  [5:0] tmp_N_23_0;
    wire  [5:0] tmp_N_27_1;
    wire [5:0] tmpOutPre;
    assign  enab= GlobalEnable10;
    assign tmp_N_23_0 = ($unsigned(N_23) << 0);
    assign tmp_N_27_1 = ($unsigned(N_27) << 0);
    assign  tmpOutPre =   tmp_N_23_0 + tmp_N_27_1;
    synDelayWithEnable #( .bitwidth(6), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clkDiv10), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(6), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_1) );
  end // Add12_block
  endgenerate
  generate
  begin: Add13_block
    wire enab;
    wire [5:0] tmpOut;
    wire  [5:0] tmp_N_72_0;
    wire  [5:0] tmp_N_80_1;
    wire [5:0] tmpOutPre;
    assign  enab= GlobalEnable10;
    assign tmp_N_72_0 = ($unsigned(N_72) << 0);
    assign tmp_N_80_1 = ($unsigned(N_80) << 0);
    assign  tmpOutPre =   tmp_N_72_0 + tmp_N_80_1;
    synDelayWithEnable #( .bitwidth(6), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clkDiv10), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(6), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_12) );
  end // Add13_block
  endgenerate
  generate
  begin: Add14_block
    wire enab;
    wire [5:0] tmpOut;
    wire  [5:0] tmp_N_1_0;
    wire  [5:0] tmp_N_12_1;
    wire [5:0] tmpOutPre;
    assign  enab= GlobalEnable10;
    assign tmp_N_1_0 = ($unsigned(N_1) << 0);
    assign tmp_N_12_1 = ($unsigned(N_12) << 0);
    assign  tmpOutPre =   tmp_N_1_0 + tmp_N_12_1;
    synDelayWithEnable #( .bitwidth(6), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clkDiv10), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(6), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_32) );
  end // Add14_block
  endgenerate
  generate
  begin: Add15_block
    wire enab;
    wire [32:0] tmpOut;
    wire signed [32:0] tmp_N_6_0;
    wire signed [32:0] tmp_N_81_1;
    wire [32:0] tmpOutPre;
    assign  enab= GlobalEnable10;
    assign tmp_N_6_0 = ($signed(N_6) << 0);
    assign tmp_N_81_1 = ($signed(N_81) << 0);
    assign  tmpOutPre =   tmp_N_6_0 - tmp_N_81_1;
    synDelayWithEnable #( .bitwidth(33), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clkDiv10), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(33), .out_width(32), .infrac(16), .outfrac(16), .round(0), .sat(0), .datatype("SS") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_83) );
  end // Add15_block
  endgenerate
  generate
  begin: Add16_block
    wire enab;
    wire [32:0] tmpOut;
    wire signed [32:0] tmp_N_70_0;
    wire signed [32:0] tmp_N_79_1;
    wire [32:0] tmpOutPre;
    assign  enab= GlobalEnable10;
    assign tmp_N_70_0 = ($signed(N_70) << 0);
    assign tmp_N_79_1 = ($signed(N_79) << 0);
    assign  tmpOutPre =   tmp_N_70_0 + tmp_N_79_1;
    synDelayWithEnable #( .bitwidth(33), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clkDiv10), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(33), .out_width(32), .infrac(16), .outfrac(16), .round(0), .sat(0), .datatype("SS") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_85) );
  end // Add16_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [1:0] tmpOut;
    wire  [1:0] tmp_N_21_0;
    wire  [1:0] tmp_N_78_1;
    wire [1:0] tmpOutPre;
    assign  enab= GlobalEnable10;
    assign tmp_N_21_0 = ($unsigned(N_21) << 0);
    assign tmp_N_78_1 = ($unsigned(N_78) << 0);
    assign  tmpOutPre =   tmp_N_21_0 + tmp_N_78_1;
    synDelayWithEnable #( .bitwidth(2), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clkDiv10), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(2), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_11) );
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [1:0] tmpOut;
    wire  [1:0] tmp_N_55_0;
    wire  [1:0] tmp_N_52_1;
    wire [1:0] tmpOutPre;
    assign  enab= GlobalEnable10;
    assign tmp_N_55_0 = ($unsigned(N_55) << 0);
    assign tmp_N_52_1 = ($unsigned(N_52) << 0);
    assign  tmpOutPre =   tmp_N_55_0 + tmp_N_52_1;
    synDelayWithEnable #( .bitwidth(2), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clkDiv10), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(2), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_26) );
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [1:0] tmpOut;
    wire  [1:0] tmp_N_76_0;
    wire  [1:0] tmp_N_77_1;
    wire [1:0] tmpOutPre;
    assign  enab= GlobalEnable10;
    assign tmp_N_76_0 = ($unsigned(N_76) << 0);
    assign tmp_N_77_1 = ($unsigned(N_77) << 0);
    assign  tmpOutPre =   tmp_N_76_0 + tmp_N_77_1;
    synDelayWithEnable #( .bitwidth(2), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clkDiv10), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(2), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_5) );
  end // Add4_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [1:0] tmpOut;
    wire  [1:0] tmp_N_29_0;
    wire  [1:0] tmp_N_17_1;
    wire [1:0] tmpOutPre;
    assign  enab= GlobalEnable10;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_17_1 = ($unsigned(N_17) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_17_1;
    synDelayWithEnable #( .bitwidth(2), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clkDiv10), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(2), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_75) );
  end // Add5_block
  endgenerate
  generate
  begin: Add6_block
    wire enab;
    wire [1:0] tmpOut;
    wire  [1:0] tmp_N_56_0;
    wire  [1:0] tmp_N_22_1;
    wire [1:0] tmpOutPre;
    assign  enab= GlobalEnable10;
    assign tmp_N_56_0 = ($unsigned(N_56) << 0);
    assign tmp_N_22_1 = ($unsigned(N_22) << 0);
    assign  tmpOutPre =   tmp_N_56_0 + tmp_N_22_1;
    synDelayWithEnable #( .bitwidth(2), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clkDiv10), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(2), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_16) );
  end // Add6_block
  endgenerate
  generate
  begin: Add7_block
    wire enab;
    wire [1:0] tmpOut;
    wire  [1:0] tmp_N_28_0;
    wire  [1:0] tmp_N_8_1;
    wire [1:0] tmpOutPre;
    assign  enab= GlobalEnable10;
    assign tmp_N_28_0 = ($unsigned(N_28) << 0);
    assign tmp_N_8_1 = ($unsigned(N_8) << 0);
    assign  tmpOutPre =   tmp_N_28_0 + tmp_N_8_1;
    synDelayWithEnable #( .bitwidth(2), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clkDiv10), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(2), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add7_block
  endgenerate
  generate
  begin: Add8_block
    wire enab;
    wire [5:0] tmpOut;
    wire  [5:0] tmp_N_16_0;
    wire  [5:0] tmp_N_31_1;
    wire [5:0] tmpOutPre;
    assign  enab= GlobalEnable10;
    assign tmp_N_16_0 = ($unsigned(N_16) << 0);
    assign tmp_N_31_1 = ($unsigned(N_31) << 0);
    assign  tmpOutPre =   tmp_N_16_0 + tmp_N_31_1;
    synDelayWithEnable #( .bitwidth(6), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clkDiv10), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(6), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_80) );
  end // Add8_block
  endgenerate
  generate
  begin: Add9_block
    wire enab;
    wire [5:0] tmpOut;
    wire  [5:0] tmp_N_5_0;
    wire  [5:0] tmp_N_75_1;
    wire [5:0] tmpOutPre;
    assign  enab= GlobalEnable10;
    assign tmp_N_5_0 = ($unsigned(N_5) << 0);
    assign tmp_N_75_1 = ($unsigned(N_75) << 0);
    assign  tmpOutPre =   tmp_N_5_0 + tmp_N_75_1;
    synDelayWithEnable #( .bitwidth(6), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clkDiv10), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(6), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_72) );
  end // Add9_block
  endgenerate
  generate
  begin: Comparator_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(20'b01101000000000000000) ;
  assign N_4 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(20'b01011000000000000000) ;
  assign N_24 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Comparator2_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(20'b01001000000000000000) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator2 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator2_block;
  endgenerate
  generate
  begin: Comparator3_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(19'b0111000000000000000) ;
  assign N_78 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator3 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator3_block;
  endgenerate
  generate
  begin: Comparator4_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(19'b0101000000000000000) ;
  assign N_55 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator4 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator4_block;
  endgenerate
  generate
  begin: Comparator5_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(18'b011000000000000000) ;
  assign N_52 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator5 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator5_block;
  endgenerate
  generate
  begin: Comparator6_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(17'b01000000000000000) ;
  assign N_76 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator6 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator6_block;
  endgenerate
assign N_9 = 5'b00000;
assign N_57 = 32'b00000000000000000000000000000000;
assign N_35 = 32'b00000000000000000000000000000000;
assign N_54 = 32'b00000000000000000000000000000000;
assign N_25 = 32'b00000000000000000000000000000000;
assign N_66 = 32'b00000000000000000000000000000000;
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(12) ) Delay_syn_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_20), .outp(N_6) );
    synDelayWithEnable #( .bitwidth(5), .preferRAMImpl(2), .delaylength(3) ) Delay1_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(5), .preferRAMImpl(2), .delaylength(6) ) Delay2_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(5) ) Delay3_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_85), .outp(N_84) );
  generate
  begin: Mult_block
    wire signed [63:0] tmpOut;
    wire signed [31:0] tmpin1;
    wire signed [31:0] tmpin2;
    wire signed [31:0] tmpin1_dly;
    wire signed [31:0] tmpin2_dly;
    wire signed [63:0] med;
    assign med = tmpOut ;
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(5) ) multOut_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(med[47:16]), .outp(N_70) );
    assign tmpin1 = $signed(N_83);
    assign tmpin2 = $signed(N_58);
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(1) ) multInp1_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpin1), .outp(tmpin1_dly) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(1) ) multInp2_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpin2), .outp(tmpin2_dly) );
    assign tmpOut = tmpin1_dly * tmpin2_dly;
  end // Mult_block
  endgenerate
  generate
  begin: Mux_Slope_0_block
    wire [31:0] med  [14:0];
    reg [31:0] tmpOut;
    assign med[0] = $unsigned(N_57) ;
    assign med[1] = $unsigned(N_34) ;
    assign med[2] = $unsigned(N_18) ;
    assign med[3] = $unsigned(N_19) ;
    assign med[4] = $unsigned(N_7) ;
    assign med[5] = $unsigned(N_74) ;
    assign med[6] = $unsigned(N_82) ;
    assign med[7] = $unsigned(N_73) ;
    assign med[8] = $unsigned(N_30) ;
    assign med[9] = $unsigned(N_49) ;
    assign med[10] = $unsigned(N_50) ;
    assign med[11] = $unsigned(N_51) ;
    assign med[12] = $unsigned(N_2) ;
    assign med[13] = $unsigned(N_3) ;
    assign med[14] = $unsigned(N_35) ;

    always@(*)
    begin
      if(N_41[4:0] >= 15)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_41[4:0]];
    end

    assign N_58 = tmpOut;
  end // Mux_Slope_0_Block
  endgenerate
  generate
  begin: Mux_Slope_0_1_block
    wire [31:0] med  [14:0];
    reg [31:0] tmpOut;
    assign med[0] = $unsigned(N_66) ;
    assign med[1] = $unsigned(N_63) ;
    assign med[2] = $unsigned(N_38) ;
    assign med[3] = $unsigned(N_40) ;
    assign med[4] = $unsigned(N_39) ;
    assign med[5] = $unsigned(N_68) ;
    assign med[6] = $unsigned(N_67) ;
    assign med[7] = $unsigned(N_33) ;
    assign med[8] = $unsigned(N_43) ;
    assign med[9] = $unsigned(N_44) ;
    assign med[10] = $unsigned(N_45) ;
    assign med[11] = $unsigned(N_60) ;
    assign med[12] = $unsigned(N_61) ;
    assign med[13] = $unsigned(N_62) ;
    assign med[14] = $unsigned(N_65) ;

    always@(*)
    begin
      if(N_69[4:0] >= 15)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_69[4:0]];
    end

    assign N_79 = tmpOut;
  end // Mux_Slope_0_1_Block
  endgenerate
  generate
  begin: Mux_inside_parenthesis_0_01_block
    wire [31:0] med  [14:0];
    reg [31:0] tmpOut;
    assign med[0] = $unsigned(N_54) ;
    assign med[1] = $unsigned(N_59) ;
    assign med[2] = $unsigned(N_36) ;
    assign med[3] = $unsigned(N_14) ;
    assign med[4] = $unsigned(N_47) ;
    assign med[5] = $unsigned(N_64) ;
    assign med[6] = $unsigned(N_46) ;
    assign med[7] = $unsigned(N_53) ;
    assign med[8] = $unsigned(N_42) ;
    assign med[9] = $unsigned(N_10) ;
    assign med[10] = $unsigned(N_37) ;
    assign med[11] = $unsigned(N_15) ;
    assign med[12] = $unsigned(N_48) ;
    assign med[13] = $unsigned(N_13) ;
    assign med[14] = $unsigned(N_25) ;

    always@(*)
    begin
      if(N_32[4:0] >= 15)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_32[4:0]];
    end

    assign N_81 = tmpOut;
  end // Mux_inside_parenthesis_0_01_Block
  endgenerate
  generate
  begin: Comparator9_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(19'b1011000000000000000) ;
  assign N_17 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator9 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator9_block;
  endgenerate
  generate
  begin: Comparator8_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(18'b101000000000000000) ;
  assign N_29 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator8 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator8_block;
  endgenerate
  generate
  begin: Comparator7_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(17'b11000000000000000) ;
  assign N_77 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator7 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator7_block;
  endgenerate
  generate
  begin: Comparator13_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(20'b10011000000000000000) ;
  assign N_8 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator13 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator13_block;
  endgenerate
  generate
  begin: Comparator12_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(20'b10101000000000000000) ;
  assign N_28 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator12 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator12_block;
  endgenerate
  generate
  begin: Comparator11_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(20'b10111000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator11 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator11_block;
  endgenerate
  generate
  begin: Comparator10_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(19'b1001000000000000000) ;
  assign N_56 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator10 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator10_block;
  endgenerate
assign N_30 = 32'b00000000000000000011001001010100;
assign N_49 = 32'b00000000000000000001101011100001;
assign N_82 = 32'b00000000000000000011001001010100;
assign N_73 = 32'b00000000000000000100000000000000;
assign N_7 = 32'b00000000000000000000101110010010;
assign N_43 = 32'b00000000000000001001111101011100;
assign N_44 = 32'b00000000000000001101000101001110;
assign N_67 = 32'b00000000000000000010111010110010;
assign N_33 = 32'b00000000000000000110000010100100;
assign N_39 = 32'b00000000000000000000011110000000;
assign N_68 = 32'b00000000000000000001001101101110;
assign N_74 = 32'b00000000000000000001101011100001;
assign N_38 = 32'b00000000000000000000000100001101;
assign N_40 = 32'b00000000000000000000001011010001;
assign N_65 = 32'b00000000000000010000000000000000;
assign N_61 = 32'b00000000000000001111110100101111;
assign N_62 = 32'b00000000000000001111111011110011;
assign N_45 = 32'b00000000000000001110110010010010;
assign N_60 = 32'b00000000000000001111100010000000;
assign N_63 = 32'b00000000000000000000000001100010;
assign N_42 = 32'b00000000000000001000000000000000;
assign N_18 = 32'b00000000000000000000000110110001;
assign N_10 = 32'b00000000000000011000000000000000;
assign N_46 = 32'b11111111111111101000000000000000;
assign N_53 = 32'b11111111111111111000000000000000;
assign N_47 = 32'b11111111111111001000000000000000;
assign N_64 = 32'b11111111111111011000000000000000;
assign N_36 = 32'b11111111111110101000000000000000;
assign N_14 = 32'b11111111111110111000000000000000;
assign N_48 = 32'b00000000000001001000000000000000;
assign N_13 = 32'b00000000000001011000000000000000;
assign N_19 = 32'b00000000000000000000010010001000;
assign N_37 = 32'b00000000000000101000000000000000;
assign N_15 = 32'b00000000000000111000000000000000;
assign N_59 = 32'b11111111111110011000000000000000;
assign N_2 = 32'b00000000000000000000000110110001;
assign N_3 = 32'b00000000000000000000000010100100;
assign N_50 = 32'b00000000000000000000101110010010;
assign N_51 = 32'b00000000000000000000010010001000;
assign N_34 = 32'b00000000000000000000000010100100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Activation_Preparation_LoopLatency10_0 (
  input clkDiv10,
  input GlobalEnable10,
  input GlobalReset,
  output [31:0] Out1, // sfix32_En16
  input [31:0] In2, // sfix32_En16
  input [31:0] In1 // sfix32_En16
);
wire [31:0] N_4;  
wire [31:0] N_1;  
wire [31:0] N_3;  
wire [31:0] N_5;  
wire [31:0] N_2;  
wire [31:0] N_In1_0_1661;  
wire [31:0] N_In2_0_1662;  
wire [31:0] N_Out1_1_1663;  
wire GlobalResetSel;
assign Out1 = N_3;
  assign N_2 = In2;
  assign N_5 = In1;
  generate
  begin: Add_block
    wire enab;
    wire [32:0] tmpOut;
    wire signed [32:0] tmp_N_4_0;
    wire signed [32:0] tmp_N_1_1;
    wire [32:0] tmpOutPre;
    assign  enab= GlobalEnable10;
    assign tmp_N_4_0 = ($signed(N_4) << 0);
    assign tmp_N_1_1 = ($signed(N_1) << 0);
    assign  tmpOutPre =   tmp_N_4_0 + tmp_N_1_1;
    synDelayWithEnable #( .bitwidth(33), .preferRAMImpl(2), .delaylength(9) ) delayForLatency_block ( .clk(clkDiv10), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(33), .out_width(32), .infrac(16), .outfrac(16), .round(0), .sat(0), .datatype("SS") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_3) );
  end // Add_block
  endgenerate
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_3), .outp(N_4) );
  generate
  begin: Mult_block
    wire signed [63:0] tmpOut;
    wire signed [31:0] tmpin1;
    wire signed [31:0] tmpin2;
    wire signed [31:0] tmpin1_dly;
    wire signed [31:0] tmpin2_dly;
    wire signed [63:0] med;
    assign med = tmpOut ;
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(9) ) multOut_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(med[47:16]), .outp(N_1) );
    assign tmpin1 = $signed(N_5);
    assign tmpin2 = $signed(N_2);
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(1) ) multInp1_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpin1), .outp(tmpin1_dly) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(1) ) multInp2_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpin2), .outp(tmpin2_dly) );
    assign tmpOut = tmpin1_dly * tmpin2_dly;
  end // Mult_block
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Activation_Preparation_LoopLatency10_0 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [31:0] Out1, // sfix32_En16
  input [31:0] In2, // sfix32_En16
  input [31:0] In1 // sfix32_En16
);
wire [31:0] N_4;  
wire [31:0] N_1;  
wire [31:0] N_3;  
wire [31:0] N_5;  
wire [31:0] N_2;  
wire [31:0] N_In1_0_1427;  
wire [31:0] N_In2_0_1428;  
wire [31:0] N_Out1_1_1429;  
wire GlobalResetSel;
assign Out1 = N_3;
  assign N_2 = In2;
  assign N_5 = In1;
  generate
  begin: Add_block
    wire enab;
    wire [32:0] tmpOut;
    wire signed [32:0] tmp_N_4_0;
    wire signed [32:0] tmp_N_1_1;
    wire [32:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_4_0 = ($signed(N_4) << 0);
    assign tmp_N_1_1 = ($signed(N_1) << 0);
    assign  tmpOutPre =   tmp_N_4_0 + tmp_N_1_1;
    synDelayWithEnable #( .bitwidth(33), .preferRAMImpl(2), .delaylength(9) ) delayForLatency_block ( .clk(clk), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(33), .out_width(32), .infrac(16), .outfrac(16), .round(0), .sat(0), .datatype("SS") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_3) );
  end // Add_block
  endgenerate
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_3), .outp(N_4) );
  generate
  begin: Mult_block
    wire signed [63:0] tmpOut;
    wire signed [31:0] tmpin1;
    wire signed [31:0] tmpin2;
    wire signed [31:0] tmpin1_dly;
    wire signed [31:0] tmpin2_dly;
    wire signed [63:0] med;
    assign med = tmpOut ;
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(9) ) multOut_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(med[47:16]), .outp(N_1) );
    assign tmpin1 = $signed(N_5);
    assign tmpin2 = $signed(N_2);
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(1) ) multInp1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpin1), .outp(tmpin1_dly) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(1) ) multInp2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpin2), .outp(tmpin2_dly) );
    assign tmpOut = tmpin1_dly * tmpin2_dly;
  end // Mult_block
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module New_Activation_Gold (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [31:0] Out1, // sfix32_En16
  input [31:0] In1 // sfix32_En16
);
wire [0:0] N_4;  
wire [0:0] N_24;  
wire [4:0] N_11;  
wire [4:0] N_26;  
wire [4:0] N_9;  
wire [4:0] N_71;  
wire [4:0] N_23;  
wire [4:0] N_27;  
wire [4:0] N_72;  
wire [4:0] N_80;  
wire [4:0] N_1;  
wire [4:0] N_12;  
wire [31:0] N_6;  
wire [31:0] N_81;  
wire [31:0] N_70;  
wire [31:0] N_79;  
wire [0:0] N_21;  
wire [0:0] N_78;  
wire [0:0] N_55;  
wire [0:0] N_52;  
wire [0:0] N_76;  
wire [0:0] N_77;  
wire [0:0] N_29;  
wire [0:0] N_17;  
wire [0:0] N_56;  
wire [0:0] N_22;  
wire [0:0] N_28;  
wire [0:0] N_8;  
wire [4:0] N_16;  
wire [4:0] N_31;  
wire [4:0] N_5;  
wire [4:0] N_75;  
wire [31:0] N_20;  
wire [4:0] N_32;  
wire [4:0] N_41;  
wire [31:0] N_85;  
wire [31:0] N_83;  
wire [31:0] N_58;  
wire [31:0] N_57;  
wire [31:0] N_34;  
wire [31:0] N_18;  
wire [31:0] N_19;  
wire [31:0] N_7;  
wire [31:0] N_74;  
wire [31:0] N_82;  
wire [31:0] N_73;  
wire [31:0] N_30;  
wire [31:0] N_49;  
wire [31:0] N_50;  
wire [31:0] N_51;  
wire [31:0] N_2;  
wire [31:0] N_3;  
wire [31:0] N_35;  
wire [4:0] N_69;  
wire [31:0] N_66;  
wire [31:0] N_63;  
wire [31:0] N_38;  
wire [31:0] N_40;  
wire [31:0] N_39;  
wire [31:0] N_68;  
wire [31:0] N_67;  
wire [31:0] N_33;  
wire [31:0] N_43;  
wire [31:0] N_44;  
wire [31:0] N_45;  
wire [31:0] N_60;  
wire [31:0] N_61;  
wire [31:0] N_62;  
wire [31:0] N_65;  
wire [31:0] N_54;  
wire [31:0] N_59;  
wire [31:0] N_36;  
wire [31:0] N_14;  
wire [31:0] N_47;  
wire [31:0] N_64;  
wire [31:0] N_46;  
wire [31:0] N_53;  
wire [31:0] N_42;  
wire [31:0] N_10;  
wire [31:0] N_37;  
wire [31:0] N_15;  
wire [31:0] N_48;  
wire [31:0] N_13;  
wire [31:0] N_25;  
wire [31:0] N_84;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen500_1_1147;  
wire [0:0] N_GlobalEnable1_0_1457;  
wire [31:0] N_In1_0_1458;  
wire [31:0] N_Out1_1_1459;  
wire GlobalResetSel;
assign Out1 = N_84;
  assign N_20 = In1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen500_1_1147 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [1:0] tmpOut;
    wire  [1:0] tmp_N_4_0;
    wire  [1:0] tmp_N_24_1;
    wire [1:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_4_0 = ($unsigned(N_4) << 0);
    assign tmp_N_24_1 = ($unsigned(N_24) << 0);
    assign  tmpOutPre =   tmp_N_4_0 + tmp_N_24_1;
    synDelayWithEnable #( .bitwidth(2), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clk), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(2), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_71) );
  end // Add1_block
  endgenerate
  generate
  begin: Add10_block
    wire enab;
    wire [5:0] tmpOut;
    wire  [5:0] tmp_N_11_0;
    wire  [5:0] tmp_N_26_1;
    wire [5:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_11_0 = ($unsigned(N_11) << 0);
    assign tmp_N_26_1 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_11_0 + tmp_N_26_1;
    synDelayWithEnable #( .bitwidth(6), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clk), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(6), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_27) );
  end // Add10_block
  endgenerate
  generate
  begin: Add11_block
    wire enab;
    wire [5:0] tmpOut;
    wire  [5:0] tmp_N_9_0;
    wire  [5:0] tmp_N_71_1;
    wire [5:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_9_0 = ($unsigned(N_9) << 0);
    assign tmp_N_71_1 = ($unsigned(N_71) << 0);
    assign  tmpOutPre =   tmp_N_9_0 + tmp_N_71_1;
    synDelayWithEnable #( .bitwidth(6), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clk), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(6), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_23) );
  end // Add11_block
  endgenerate
  generate
  begin: Add12_block
    wire enab;
    wire [5:0] tmpOut;
    wire  [5:0] tmp_N_23_0;
    wire  [5:0] tmp_N_27_1;
    wire [5:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_23_0 = ($unsigned(N_23) << 0);
    assign tmp_N_27_1 = ($unsigned(N_27) << 0);
    assign  tmpOutPre =   tmp_N_23_0 + tmp_N_27_1;
    synDelayWithEnable #( .bitwidth(6), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clk), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(6), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_1) );
  end // Add12_block
  endgenerate
  generate
  begin: Add13_block
    wire enab;
    wire [5:0] tmpOut;
    wire  [5:0] tmp_N_72_0;
    wire  [5:0] tmp_N_80_1;
    wire [5:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_72_0 = ($unsigned(N_72) << 0);
    assign tmp_N_80_1 = ($unsigned(N_80) << 0);
    assign  tmpOutPre =   tmp_N_72_0 + tmp_N_80_1;
    synDelayWithEnable #( .bitwidth(6), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clk), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(6), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_12) );
  end // Add13_block
  endgenerate
  generate
  begin: Add14_block
    wire enab;
    wire [5:0] tmpOut;
    wire  [5:0] tmp_N_1_0;
    wire  [5:0] tmp_N_12_1;
    wire [5:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_1_0 = ($unsigned(N_1) << 0);
    assign tmp_N_12_1 = ($unsigned(N_12) << 0);
    assign  tmpOutPre =   tmp_N_1_0 + tmp_N_12_1;
    synDelayWithEnable #( .bitwidth(6), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clk), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(6), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_32) );
  end // Add14_block
  endgenerate
  generate
  begin: Add15_block
    wire enab;
    wire [32:0] tmpOut;
    wire signed [32:0] tmp_N_6_0;
    wire signed [32:0] tmp_N_81_1;
    wire [32:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_6_0 = ($signed(N_6) << 0);
    assign tmp_N_81_1 = ($signed(N_81) << 0);
    assign  tmpOutPre =   tmp_N_6_0 - tmp_N_81_1;
    synDelayWithEnable #( .bitwidth(33), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clk), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(33), .out_width(32), .infrac(16), .outfrac(16), .round(0), .sat(0), .datatype("SS") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_83) );
  end // Add15_block
  endgenerate
  generate
  begin: Add16_block
    wire enab;
    wire [32:0] tmpOut;
    wire signed [32:0] tmp_N_70_0;
    wire signed [32:0] tmp_N_79_1;
    wire [32:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_70_0 = ($signed(N_70) << 0);
    assign tmp_N_79_1 = ($signed(N_79) << 0);
    assign  tmpOutPre =   tmp_N_70_0 + tmp_N_79_1;
    synDelayWithEnable #( .bitwidth(33), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clk), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(33), .out_width(32), .infrac(16), .outfrac(16), .round(0), .sat(0), .datatype("SS") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_85) );
  end // Add16_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [1:0] tmpOut;
    wire  [1:0] tmp_N_21_0;
    wire  [1:0] tmp_N_78_1;
    wire [1:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_21_0 = ($unsigned(N_21) << 0);
    assign tmp_N_78_1 = ($unsigned(N_78) << 0);
    assign  tmpOutPre =   tmp_N_21_0 + tmp_N_78_1;
    synDelayWithEnable #( .bitwidth(2), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clk), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(2), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_11) );
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [1:0] tmpOut;
    wire  [1:0] tmp_N_55_0;
    wire  [1:0] tmp_N_52_1;
    wire [1:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_55_0 = ($unsigned(N_55) << 0);
    assign tmp_N_52_1 = ($unsigned(N_52) << 0);
    assign  tmpOutPre =   tmp_N_55_0 + tmp_N_52_1;
    synDelayWithEnable #( .bitwidth(2), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clk), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(2), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_26) );
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [1:0] tmpOut;
    wire  [1:0] tmp_N_76_0;
    wire  [1:0] tmp_N_77_1;
    wire [1:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_76_0 = ($unsigned(N_76) << 0);
    assign tmp_N_77_1 = ($unsigned(N_77) << 0);
    assign  tmpOutPre =   tmp_N_76_0 + tmp_N_77_1;
    synDelayWithEnable #( .bitwidth(2), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clk), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(2), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_5) );
  end // Add4_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [1:0] tmpOut;
    wire  [1:0] tmp_N_29_0;
    wire  [1:0] tmp_N_17_1;
    wire [1:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_17_1 = ($unsigned(N_17) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_17_1;
    synDelayWithEnable #( .bitwidth(2), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clk), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(2), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_75) );
  end // Add5_block
  endgenerate
  generate
  begin: Add6_block
    wire enab;
    wire [1:0] tmpOut;
    wire  [1:0] tmp_N_56_0;
    wire  [1:0] tmp_N_22_1;
    wire [1:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_56_0 = ($unsigned(N_56) << 0);
    assign tmp_N_22_1 = ($unsigned(N_22) << 0);
    assign  tmpOutPre =   tmp_N_56_0 + tmp_N_22_1;
    synDelayWithEnable #( .bitwidth(2), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clk), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(2), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_16) );
  end // Add6_block
  endgenerate
  generate
  begin: Add7_block
    wire enab;
    wire [1:0] tmpOut;
    wire  [1:0] tmp_N_28_0;
    wire  [1:0] tmp_N_8_1;
    wire [1:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_28_0 = ($unsigned(N_28) << 0);
    assign tmp_N_8_1 = ($unsigned(N_8) << 0);
    assign  tmpOutPre =   tmp_N_28_0 + tmp_N_8_1;
    synDelayWithEnable #( .bitwidth(2), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clk), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(2), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add7_block
  endgenerate
  generate
  begin: Add8_block
    wire enab;
    wire [5:0] tmpOut;
    wire  [5:0] tmp_N_16_0;
    wire  [5:0] tmp_N_31_1;
    wire [5:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_16_0 = ($unsigned(N_16) << 0);
    assign tmp_N_31_1 = ($unsigned(N_31) << 0);
    assign  tmpOutPre =   tmp_N_16_0 + tmp_N_31_1;
    synDelayWithEnable #( .bitwidth(6), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clk), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(6), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_80) );
  end // Add8_block
  endgenerate
  generate
  begin: Add9_block
    wire enab;
    wire [5:0] tmpOut;
    wire  [5:0] tmp_N_5_0;
    wire  [5:0] tmp_N_75_1;
    wire [5:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_5_0 = ($unsigned(N_5) << 0);
    assign tmp_N_75_1 = ($unsigned(N_75) << 0);
    assign  tmpOutPre =   tmp_N_5_0 + tmp_N_75_1;
    synDelayWithEnable #( .bitwidth(6), .preferRAMImpl(2), .delaylength(3) ) delayForLatency_block ( .clk(clk), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(6), .out_width(5), .infrac(0), .outfrac(0), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_72) );
  end // Add9_block
  endgenerate
  generate
  begin: Comparator_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(20'b01101000000000000000) ;
  assign N_4 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(20'b01011000000000000000) ;
  assign N_24 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Comparator2_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(20'b01001000000000000000) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator2 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator2_block;
  endgenerate
  generate
  begin: Comparator3_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(19'b0111000000000000000) ;
  assign N_78 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator3 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator3_block;
  endgenerate
  generate
  begin: Comparator4_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(19'b0101000000000000000) ;
  assign N_55 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator4 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator4_block;
  endgenerate
  generate
  begin: Comparator5_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(18'b011000000000000000) ;
  assign N_52 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator5 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator5_block;
  endgenerate
  generate
  begin: Comparator6_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(17'b01000000000000000) ;
  assign N_76 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator6 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator6_block;
  endgenerate
assign N_9 = 5'b00000;
assign N_57 = 32'b00000000000000000000000000000000;
assign N_35 = 32'b00000000000000000000000000000000;
assign N_54 = 32'b00000000000000000000000000000000;
assign N_25 = 32'b00000000000000000000000000000000;
assign N_66 = 32'b00000000000000000000000000000000;
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(12) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_20), .outp(N_6) );
    synDelayWithEnable #( .bitwidth(5), .preferRAMImpl(2), .delaylength(3) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(5), .preferRAMImpl(2), .delaylength(6) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(5) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_85), .outp(N_84) );
  generate
  begin: Mult_block
    wire signed [63:0] tmpOut;
    wire signed [31:0] tmpin1;
    wire signed [31:0] tmpin2;
    wire signed [31:0] tmpin1_dly;
    wire signed [31:0] tmpin2_dly;
    wire signed [63:0] med;
    assign med = tmpOut ;
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(5) ) multOut_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(med[47:16]), .outp(N_70) );
    assign tmpin1 = $signed(N_83);
    assign tmpin2 = $signed(N_58);
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(1) ) multInp1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpin1), .outp(tmpin1_dly) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(1) ) multInp2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpin2), .outp(tmpin2_dly) );
    assign tmpOut = tmpin1_dly * tmpin2_dly;
  end // Mult_block
  endgenerate
  generate
  begin: Mux_Slope_0_block
    wire [31:0] med  [14:0];
    reg [31:0] tmpOut;
    assign med[0] = $unsigned(N_57) ;
    assign med[1] = $unsigned(N_34) ;
    assign med[2] = $unsigned(N_18) ;
    assign med[3] = $unsigned(N_19) ;
    assign med[4] = $unsigned(N_7) ;
    assign med[5] = $unsigned(N_74) ;
    assign med[6] = $unsigned(N_82) ;
    assign med[7] = $unsigned(N_73) ;
    assign med[8] = $unsigned(N_30) ;
    assign med[9] = $unsigned(N_49) ;
    assign med[10] = $unsigned(N_50) ;
    assign med[11] = $unsigned(N_51) ;
    assign med[12] = $unsigned(N_2) ;
    assign med[13] = $unsigned(N_3) ;
    assign med[14] = $unsigned(N_35) ;

    always@(*)
    begin
      if(N_41[4:0] >= 15)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_41[4:0]];
    end

    assign N_58 = tmpOut;
  end // Mux_Slope_0_Block
  endgenerate
  generate
  begin: Mux_Slope_0_1_block
    wire [31:0] med  [14:0];
    reg [31:0] tmpOut;
    assign med[0] = $unsigned(N_66) ;
    assign med[1] = $unsigned(N_63) ;
    assign med[2] = $unsigned(N_38) ;
    assign med[3] = $unsigned(N_40) ;
    assign med[4] = $unsigned(N_39) ;
    assign med[5] = $unsigned(N_68) ;
    assign med[6] = $unsigned(N_67) ;
    assign med[7] = $unsigned(N_33) ;
    assign med[8] = $unsigned(N_43) ;
    assign med[9] = $unsigned(N_44) ;
    assign med[10] = $unsigned(N_45) ;
    assign med[11] = $unsigned(N_60) ;
    assign med[12] = $unsigned(N_61) ;
    assign med[13] = $unsigned(N_62) ;
    assign med[14] = $unsigned(N_65) ;

    always@(*)
    begin
      if(N_69[4:0] >= 15)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_69[4:0]];
    end

    assign N_79 = tmpOut;
  end // Mux_Slope_0_1_Block
  endgenerate
  generate
  begin: Mux_inside_parenthesis_0_01_block
    wire [31:0] med  [14:0];
    reg [31:0] tmpOut;
    assign med[0] = $unsigned(N_54) ;
    assign med[1] = $unsigned(N_59) ;
    assign med[2] = $unsigned(N_36) ;
    assign med[3] = $unsigned(N_14) ;
    assign med[4] = $unsigned(N_47) ;
    assign med[5] = $unsigned(N_64) ;
    assign med[6] = $unsigned(N_46) ;
    assign med[7] = $unsigned(N_53) ;
    assign med[8] = $unsigned(N_42) ;
    assign med[9] = $unsigned(N_10) ;
    assign med[10] = $unsigned(N_37) ;
    assign med[11] = $unsigned(N_15) ;
    assign med[12] = $unsigned(N_48) ;
    assign med[13] = $unsigned(N_13) ;
    assign med[14] = $unsigned(N_25) ;

    always@(*)
    begin
      if(N_32[4:0] >= 15)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_32[4:0]];
    end

    assign N_81 = tmpOut;
  end // Mux_inside_parenthesis_0_01_Block
  endgenerate
  generate
  begin: Comparator9_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(19'b1011000000000000000) ;
  assign N_17 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator9 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator9_block;
  endgenerate
  generate
  begin: Comparator8_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(18'b101000000000000000) ;
  assign N_29 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator8 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator8_block;
  endgenerate
  generate
  begin: Comparator7_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(17'b11000000000000000) ;
  assign N_77 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator7 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator7_block;
  endgenerate
  generate
  begin: Comparator13_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(20'b10011000000000000000) ;
  assign N_8 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator13 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator13_block;
  endgenerate
  generate
  begin: Comparator12_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(20'b10101000000000000000) ;
  assign N_28 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator12 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator12_block;
  endgenerate
  generate
  begin: Comparator11_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(20'b10111000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator11 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator11_block;
  endgenerate
  generate
  begin: Comparator10_block
  wire signed [31:0] med1;
  wire signed [31:0] med2;
  wire outp;
  assign med1 = $signed(N_20) ;
  assign med2 = $signed(19'b1001000000000000000) ;
  assign N_56 = outp;
    synComparator #(
      .bitwidth(32),
      .datatype("signed"),
      .opr("geq")
    ) Comparator10 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator10_block;
  endgenerate
assign N_30 = 32'b00000000000000000011001001010100;
assign N_49 = 32'b00000000000000000001101011100001;
assign N_82 = 32'b00000000000000000011001001010100;
assign N_73 = 32'b00000000000000000100000000000000;
assign N_7 = 32'b00000000000000000000101110010010;
assign N_43 = 32'b00000000000000001001111101011100;
assign N_44 = 32'b00000000000000001101000101001110;
assign N_67 = 32'b00000000000000000010111010110010;
assign N_33 = 32'b00000000000000000110000010100100;
assign N_39 = 32'b00000000000000000000011110000000;
assign N_68 = 32'b00000000000000000001001101101110;
assign N_74 = 32'b00000000000000000001101011100001;
assign N_38 = 32'b00000000000000000000000100001101;
assign N_40 = 32'b00000000000000000000001011010001;
assign N_65 = 32'b00000000000000010000000000000000;
assign N_61 = 32'b00000000000000001111110100101111;
assign N_62 = 32'b00000000000000001111111011110011;
assign N_45 = 32'b00000000000000001110110010010010;
assign N_60 = 32'b00000000000000001111100010000000;
assign N_63 = 32'b00000000000000000000000001100010;
assign N_42 = 32'b00000000000000001000000000000000;
assign N_18 = 32'b00000000000000000000000110110001;
assign N_10 = 32'b00000000000000011000000000000000;
assign N_46 = 32'b11111111111111101000000000000000;
assign N_53 = 32'b11111111111111111000000000000000;
assign N_47 = 32'b11111111111111001000000000000000;
assign N_64 = 32'b11111111111111011000000000000000;
assign N_36 = 32'b11111111111110101000000000000000;
assign N_14 = 32'b11111111111110111000000000000000;
assign N_48 = 32'b00000000000001001000000000000000;
assign N_13 = 32'b00000000000001011000000000000000;
assign N_19 = 32'b00000000000000000000010010001000;
assign N_37 = 32'b00000000000000101000000000000000;
assign N_15 = 32'b00000000000000111000000000000000;
assign N_59 = 32'b11111111111110011000000000000000;
assign N_2 = 32'b00000000000000000000000110110001;
assign N_3 = 32'b00000000000000000000000010100100;
assign N_50 = 32'b00000000000000000000101110010010;
assign N_51 = 32'b00000000000000000000010010001000;
assign N_34 = 32'b00000000000000000000000010100100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem9 (
  input clkDiv10,
  input GlobalEnable10,
  input clkDiv100,
  input GlobalEnable100,
  input GlobalReset,
  output [31:0] Out1, // sfix32_En16
  input [31:0] In11, // sfix32_En16
  input [31:0] In10, // sfix32_En16
  input [31:0] In9, // sfix32_En16
  input [31:0] In8, // sfix32_En16
  input [31:0] In7, // sfix32_En16
  input [31:0] In6, // sfix32_En16
  input [31:0] In5, // sfix32_En16
  input [31:0] In4, // sfix32_En16
  input [31:0] In3, // sfix32_En16
  input [31:0] In2, // sfix32_En16
  input [31:0] In1 // sfix32_En16
);
wire [31:0] N_1;  
wire [3:0] N_2;  
wire [3:0] N_3;  
wire [31:0] N_Upsampler_RG0_1_500;  
wire [31:0] N_Upsampler_RG1_1_501;  
wire [31:0] N_Upsampler_RG2_1_502;  
wire [31:0] N_Upsampler_RG3_1_503;  
wire [31:0] N_Upsampler_RG4_1_504;  
wire [31:0] N_Upsampler_RG5_1_505;  
wire [31:0] N_Upsampler_RG6_1_506;  
wire [31:0] N_Upsampler_RG7_1_507;  
wire [31:0] N_Upsampler_RG8_1_508;  
wire [31:0] N_Upsampler_RG9_1_509;  
wire [31:0] N_5;  
wire [31:0] N_7;  
wire [31:0] N_8;  
wire [31:0] N_9;  
wire [31:0] N_10;  
wire [31:0] N_11;  
wire [31:0] N_12;  
wire [31:0] N_13;  
wire [31:0] N_14;  
wire [31:0] N_15;  
wire [31:0] N_16;  
wire [0:0] N_GlobalEnable10_SubSystem_Convert_AutoGen528_1_1175;  
wire [31:0] N_4;  
wire [31:0] N_6;  
wire [31:0] N_17;  
wire [0:0] N_GlobalEnable10_0_1493;  
wire [31:0] N_In1_0_1494;  
wire [31:0] N_In2_0_1495;  
wire [31:0] N_In3_0_1496;  
wire [31:0] N_In4_0_1497;  
wire [31:0] N_In5_0_1498;  
wire [31:0] N_In6_0_1499;  
wire [31:0] N_In7_0_1500;  
wire [31:0] N_In8_0_1501;  
wire [31:0] N_In9_0_1502;  
wire [31:0] N_In10_0_1503;  
wire [31:0] N_In11_0_1504;  
wire [31:0] N_Out1_1_1505;  
wire GlobalResetSel;
reg [3:0] UpsampleCounterclkDiv10Urate10;
  always @(posedge clkDiv10 )//or posedge GlobalResetSel)
  begin: ucntProc10_10_proc
    integer i;
    if(GlobalResetSel==1) 
        UpsampleCounterclkDiv10Urate10 <= 0;
      else if( GlobalEnable10==1)
        if(UpsampleCounterclkDiv10Urate10 == 9 || GlobalResetSel==1)
          UpsampleCounterclkDiv10Urate10 <= 0;
        else
          UpsampleCounterclkDiv10Urate10 <= UpsampleCounterclkDiv10Urate10+1;
    end //ucntProc10

assign Out1 = N_5;
  assign N_16 = In11;
  assign N_15 = In10;
  assign N_14 = In9;
  assign N_13 = In8;
  assign N_12 = In7;
  assign N_11 = In6;
  assign N_10 = In5;
  assign N_9 = In4;
  assign N_8 = In3;
  assign N_7 = In2;
  assign N_6 = In1;
  assign N_GlobalEnable10_SubSystem_Convert_AutoGen528_1_1175 = GlobalEnable10;
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_1), .outp(N_5) );
    synDelayWithEnable #( .bitwidth(4), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_2), .outp(N_3) );
  generate
  begin: Mux_block
    wire [31:0] med  [9:0];
    reg [31:0] tmpOut;
    assign med[0] = $signed(N_Upsampler_RG0_1_500) ;
    assign med[1] = $signed(N_Upsampler_RG1_1_501) ;
    assign med[2] = $signed(N_Upsampler_RG2_1_502) ;
    assign med[3] = $signed(N_Upsampler_RG3_1_503) ;
    assign med[4] = $signed(N_Upsampler_RG4_1_504) ;
    assign med[5] = $signed(N_Upsampler_RG5_1_505) ;
    assign med[6] = $signed(N_Upsampler_RG6_1_506) ;
    assign med[7] = $signed(N_Upsampler_RG7_1_507) ;
    assign med[8] = $signed(N_Upsampler_RG8_1_508) ;
    assign med[9] = $signed(N_Upsampler_RG9_1_509) ;

    always@(*)
    begin
      if(N_3[3:0] >= 10)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_3[3:0]];
    end

    assign N_17 = tmpOut;
  end // Mux_Block
  endgenerate
    assign N_Upsampler_RG0_1_500 = N_7; // Upsampler_RG0
    assign N_Upsampler_RG1_1_501 = N_8; // Upsampler_RG1
    assign N_Upsampler_RG2_1_502 = N_9; // Upsampler_RG2
    assign N_Upsampler_RG3_1_503 = N_10; // Upsampler_RG3
    assign N_Upsampler_RG4_1_504 = N_11; // Upsampler_RG4
    assign N_Upsampler_RG5_1_505 = N_12; // Upsampler_RG5
    assign N_Upsampler_RG6_1_506 = N_13; // Upsampler_RG6
    assign N_Upsampler_RG7_1_507 = N_14; // Upsampler_RG7
    assign N_Upsampler_RG8_1_508 = N_15; // Upsampler_RG8
    assign N_Upsampler_RG9_1_509 = N_16; // Upsampler_RG9
generate
begin:  Counter_block
wire [3:0] ldIn;
wire rst, en, enloc;
    assign enloc = 1;
    assign en = (enloc && N_GlobalEnable10_SubSystem_Convert_AutoGen528_1_1175[0]);
    assign rst = 0;
assign ldIn = 4'b0;
    synCounter #(
        .en_exists('b1),
        .rst_exists('b0),
        .ld_exists('b0),
        .rdy_exists('b0),
        .ctype(2),
        .ival(0),
        .tval(9),
        .bitwidth(4),
        .isSigned('b0)
      ) myCounter (
        .clk(clkDiv10),
        .en(en),
        .grst(GlobalResetSel),
        .rst(rst),
        .up(1'b1),
        .ld(1'b0),
        .din(ldIn),
        .rdy(),
        .cnt(N_2)
      );
    end
  endgenerate
    Subsystem_New_Activation_Gold  myNew_Activation_Gold (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .GlobalReset(GlobalResetSel),
      .In1(N_4),
      .Out1(N_1)    );
    Subsystem_Activation_Preparation_LoopLatency10_0  myActivation_Preparation_LoopLatency10_0 (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .GlobalReset(GlobalResetSel),
      .In1(N_6),
      .In2(N_17),
      .Out1(N_4)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem8 (
  input clkDiv10,
  input GlobalEnable10,
  input clkDiv100,
  input GlobalEnable100,
  input GlobalReset,
  output [31:0] Out1, // sfix32_En16
  input [31:0] In11, // sfix32_En16
  input [31:0] In10, // sfix32_En16
  input [31:0] In9, // sfix32_En16
  input [31:0] In8, // sfix32_En16
  input [31:0] In7, // sfix32_En16
  input [31:0] In6, // sfix32_En16
  input [31:0] In5, // sfix32_En16
  input [31:0] In4, // sfix32_En16
  input [31:0] In3, // sfix32_En16
  input [31:0] In2, // sfix32_En16
  input [31:0] In1 // sfix32_En16
);
wire [31:0] N_1;  
wire [3:0] N_2;  
wire [3:0] N_3;  
wire [31:0] N_Upsampler_RG10_1_510;  
wire [31:0] N_Upsampler_RG11_1_511;  
wire [31:0] N_Upsampler_RG12_1_512;  
wire [31:0] N_Upsampler_RG13_1_513;  
wire [31:0] N_Upsampler_RG14_1_514;  
wire [31:0] N_Upsampler_RG15_1_515;  
wire [31:0] N_Upsampler_RG16_1_516;  
wire [31:0] N_Upsampler_RG17_1_517;  
wire [31:0] N_Upsampler_RG18_1_518;  
wire [31:0] N_Upsampler_RG19_1_519;  
wire [31:0] N_5;  
wire [31:0] N_7;  
wire [31:0] N_8;  
wire [31:0] N_9;  
wire [31:0] N_10;  
wire [31:0] N_11;  
wire [31:0] N_12;  
wire [31:0] N_13;  
wire [31:0] N_14;  
wire [31:0] N_15;  
wire [31:0] N_16;  
wire [0:0] N_GlobalEnable10_SubSystem_Convert_AutoGen526_1_1173;  
wire [31:0] N_4;  
wire [31:0] N_6;  
wire [31:0] N_17;  
wire [0:0] N_GlobalEnable10_0_1512;  
wire [31:0] N_In1_0_1513;  
wire [31:0] N_In2_0_1514;  
wire [31:0] N_In3_0_1515;  
wire [31:0] N_In4_0_1516;  
wire [31:0] N_In5_0_1517;  
wire [31:0] N_In6_0_1518;  
wire [31:0] N_In7_0_1519;  
wire [31:0] N_In8_0_1520;  
wire [31:0] N_In9_0_1521;  
wire [31:0] N_In10_0_1522;  
wire [31:0] N_In11_0_1523;  
wire [31:0] N_Out1_1_1524;  
wire GlobalResetSel;
reg [3:0] UpsampleCounterclkDiv10Urate10;
  always @(posedge clkDiv10 )//or posedge GlobalResetSel)
  begin: ucntProc10_10_proc
    integer i;
    if(GlobalResetSel==1) 
        UpsampleCounterclkDiv10Urate10 <= 0;
      else if( GlobalEnable10==1)
        if(UpsampleCounterclkDiv10Urate10 == 9 || GlobalResetSel==1)
          UpsampleCounterclkDiv10Urate10 <= 0;
        else
          UpsampleCounterclkDiv10Urate10 <= UpsampleCounterclkDiv10Urate10+1;
    end //ucntProc10

assign Out1 = N_5;
  assign N_16 = In11;
  assign N_15 = In10;
  assign N_14 = In9;
  assign N_13 = In8;
  assign N_12 = In7;
  assign N_11 = In6;
  assign N_10 = In5;
  assign N_9 = In4;
  assign N_8 = In3;
  assign N_7 = In2;
  assign N_6 = In1;
  assign N_GlobalEnable10_SubSystem_Convert_AutoGen526_1_1173 = GlobalEnable10;
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_1), .outp(N_5) );
    synDelayWithEnable #( .bitwidth(4), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_2), .outp(N_3) );
  generate
  begin: Mux_block
    wire [31:0] med  [9:0];
    reg [31:0] tmpOut;
    assign med[0] = $signed(N_Upsampler_RG10_1_510) ;
    assign med[1] = $signed(N_Upsampler_RG11_1_511) ;
    assign med[2] = $signed(N_Upsampler_RG12_1_512) ;
    assign med[3] = $signed(N_Upsampler_RG13_1_513) ;
    assign med[4] = $signed(N_Upsampler_RG14_1_514) ;
    assign med[5] = $signed(N_Upsampler_RG15_1_515) ;
    assign med[6] = $signed(N_Upsampler_RG16_1_516) ;
    assign med[7] = $signed(N_Upsampler_RG17_1_517) ;
    assign med[8] = $signed(N_Upsampler_RG18_1_518) ;
    assign med[9] = $signed(N_Upsampler_RG19_1_519) ;

    always@(*)
    begin
      if(N_3[3:0] >= 10)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_3[3:0]];
    end

    assign N_17 = tmpOut;
  end // Mux_Block
  endgenerate
    assign N_Upsampler_RG10_1_510 = N_7; // Upsampler_RG10
    assign N_Upsampler_RG11_1_511 = N_8; // Upsampler_RG11
    assign N_Upsampler_RG12_1_512 = N_9; // Upsampler_RG12
    assign N_Upsampler_RG13_1_513 = N_10; // Upsampler_RG13
    assign N_Upsampler_RG14_1_514 = N_11; // Upsampler_RG14
    assign N_Upsampler_RG15_1_515 = N_12; // Upsampler_RG15
    assign N_Upsampler_RG16_1_516 = N_13; // Upsampler_RG16
    assign N_Upsampler_RG17_1_517 = N_14; // Upsampler_RG17
    assign N_Upsampler_RG18_1_518 = N_15; // Upsampler_RG18
    assign N_Upsampler_RG19_1_519 = N_16; // Upsampler_RG19
generate
begin:  Counter_block
wire [3:0] ldIn;
wire rst, en, enloc;
    assign enloc = 1;
    assign en = (enloc && N_GlobalEnable10_SubSystem_Convert_AutoGen526_1_1173[0]);
    assign rst = 0;
assign ldIn = 4'b0;
    synCounter #(
        .en_exists('b1),
        .rst_exists('b0),
        .ld_exists('b0),
        .rdy_exists('b0),
        .ctype(2),
        .ival(0),
        .tval(9),
        .bitwidth(4),
        .isSigned('b0)
      ) myCounter (
        .clk(clkDiv10),
        .en(en),
        .grst(GlobalResetSel),
        .rst(rst),
        .up(1'b1),
        .ld(1'b0),
        .din(ldIn),
        .rdy(),
        .cnt(N_2)
      );
    end
  endgenerate
    Subsystem_New_Activation_Gold  myNew_Activation_Gold (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .GlobalReset(GlobalResetSel),
      .In1(N_4),
      .Out1(N_1)    );
    Subsystem_Activation_Preparation_LoopLatency10_0  myActivation_Preparation_LoopLatency10_0 (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .GlobalReset(GlobalResetSel),
      .In1(N_6),
      .In2(N_17),
      .Out1(N_4)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem7 (
  input clkDiv10,
  input GlobalEnable10,
  input clkDiv100,
  input GlobalEnable100,
  input GlobalReset,
  output [31:0] Out1, // sfix32_En16
  input [31:0] In11, // sfix32_En16
  input [31:0] In10, // sfix32_En16
  input [31:0] In9, // sfix32_En16
  input [31:0] In8, // sfix32_En16
  input [31:0] In7, // sfix32_En16
  input [31:0] In6, // sfix32_En16
  input [31:0] In5, // sfix32_En16
  input [31:0] In4, // sfix32_En16
  input [31:0] In3, // sfix32_En16
  input [31:0] In2, // sfix32_En16
  input [31:0] In1 // sfix32_En16
);
wire [31:0] N_1;  
wire [3:0] N_2;  
wire [3:0] N_3;  
wire [31:0] N_Upsampler_RG20_1_520;  
wire [31:0] N_Upsampler_RG21_1_521;  
wire [31:0] N_Upsampler_RG22_1_522;  
wire [31:0] N_Upsampler_RG23_1_523;  
wire [31:0] N_Upsampler_RG24_1_524;  
wire [31:0] N_Upsampler_RG25_1_525;  
wire [31:0] N_Upsampler_RG26_1_526;  
wire [31:0] N_Upsampler_RG27_1_527;  
wire [31:0] N_Upsampler_RG28_1_528;  
wire [31:0] N_Upsampler_RG29_1_529;  
wire [31:0] N_5;  
wire [31:0] N_7;  
wire [31:0] N_8;  
wire [31:0] N_9;  
wire [31:0] N_10;  
wire [31:0] N_11;  
wire [31:0] N_12;  
wire [31:0] N_13;  
wire [31:0] N_14;  
wire [31:0] N_15;  
wire [31:0] N_16;  
wire [0:0] N_GlobalEnable10_SubSystem_Convert_AutoGen524_1_1171;  
wire [31:0] N_4;  
wire [31:0] N_6;  
wire [31:0] N_17;  
wire [0:0] N_GlobalEnable10_0_1531;  
wire [31:0] N_In1_0_1532;  
wire [31:0] N_In2_0_1533;  
wire [31:0] N_In3_0_1534;  
wire [31:0] N_In4_0_1535;  
wire [31:0] N_In5_0_1536;  
wire [31:0] N_In6_0_1537;  
wire [31:0] N_In7_0_1538;  
wire [31:0] N_In8_0_1539;  
wire [31:0] N_In9_0_1540;  
wire [31:0] N_In10_0_1541;  
wire [31:0] N_In11_0_1542;  
wire [31:0] N_Out1_1_1543;  
wire GlobalResetSel;
reg [3:0] UpsampleCounterclkDiv10Urate10;
  always @(posedge clkDiv10 )//or posedge GlobalResetSel)
  begin: ucntProc10_10_proc
    integer i;
    if(GlobalResetSel==1) 
        UpsampleCounterclkDiv10Urate10 <= 0;
      else if( GlobalEnable10==1)
        if(UpsampleCounterclkDiv10Urate10 == 9 || GlobalResetSel==1)
          UpsampleCounterclkDiv10Urate10 <= 0;
        else
          UpsampleCounterclkDiv10Urate10 <= UpsampleCounterclkDiv10Urate10+1;
    end //ucntProc10

assign Out1 = N_5;
  assign N_16 = In11;
  assign N_15 = In10;
  assign N_14 = In9;
  assign N_13 = In8;
  assign N_12 = In7;
  assign N_11 = In6;
  assign N_10 = In5;
  assign N_9 = In4;
  assign N_8 = In3;
  assign N_7 = In2;
  assign N_6 = In1;
  assign N_GlobalEnable10_SubSystem_Convert_AutoGen524_1_1171 = GlobalEnable10;
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_1), .outp(N_5) );
    synDelayWithEnable #( .bitwidth(4), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_2), .outp(N_3) );
  generate
  begin: Mux_block
    wire [31:0] med  [9:0];
    reg [31:0] tmpOut;
    assign med[0] = $signed(N_Upsampler_RG20_1_520) ;
    assign med[1] = $signed(N_Upsampler_RG21_1_521) ;
    assign med[2] = $signed(N_Upsampler_RG22_1_522) ;
    assign med[3] = $signed(N_Upsampler_RG23_1_523) ;
    assign med[4] = $signed(N_Upsampler_RG24_1_524) ;
    assign med[5] = $signed(N_Upsampler_RG25_1_525) ;
    assign med[6] = $signed(N_Upsampler_RG26_1_526) ;
    assign med[7] = $signed(N_Upsampler_RG27_1_527) ;
    assign med[8] = $signed(N_Upsampler_RG28_1_528) ;
    assign med[9] = $signed(N_Upsampler_RG29_1_529) ;

    always@(*)
    begin
      if(N_3[3:0] >= 10)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_3[3:0]];
    end

    assign N_17 = tmpOut;
  end // Mux_Block
  endgenerate
    assign N_Upsampler_RG20_1_520 = N_7; // Upsampler_RG20
    assign N_Upsampler_RG21_1_521 = N_8; // Upsampler_RG21
    assign N_Upsampler_RG22_1_522 = N_9; // Upsampler_RG22
    assign N_Upsampler_RG23_1_523 = N_10; // Upsampler_RG23
    assign N_Upsampler_RG24_1_524 = N_11; // Upsampler_RG24
    assign N_Upsampler_RG25_1_525 = N_12; // Upsampler_RG25
    assign N_Upsampler_RG26_1_526 = N_13; // Upsampler_RG26
    assign N_Upsampler_RG27_1_527 = N_14; // Upsampler_RG27
    assign N_Upsampler_RG28_1_528 = N_15; // Upsampler_RG28
    assign N_Upsampler_RG29_1_529 = N_16; // Upsampler_RG29
generate
begin:  Counter_block
wire [3:0] ldIn;
wire rst, en, enloc;
    assign enloc = 1;
    assign en = (enloc && N_GlobalEnable10_SubSystem_Convert_AutoGen524_1_1171[0]);
    assign rst = 0;
assign ldIn = 4'b0;
    synCounter #(
        .en_exists('b1),
        .rst_exists('b0),
        .ld_exists('b0),
        .rdy_exists('b0),
        .ctype(2),
        .ival(0),
        .tval(9),
        .bitwidth(4),
        .isSigned('b0)
      ) myCounter (
        .clk(clkDiv10),
        .en(en),
        .grst(GlobalResetSel),
        .rst(rst),
        .up(1'b1),
        .ld(1'b0),
        .din(ldIn),
        .rdy(),
        .cnt(N_2)
      );
    end
  endgenerate
    Subsystem_New_Activation_Gold  myNew_Activation_Gold (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .GlobalReset(GlobalResetSel),
      .In1(N_4),
      .Out1(N_1)    );
    Subsystem_Activation_Preparation_LoopLatency10_0  myActivation_Preparation_LoopLatency10_0 (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .GlobalReset(GlobalResetSel),
      .In1(N_6),
      .In2(N_17),
      .Out1(N_4)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem6 (
  input clkDiv10,
  input GlobalEnable10,
  input clkDiv100,
  input GlobalEnable100,
  input GlobalReset,
  output [31:0] Out1, // sfix32_En16
  input [31:0] In11, // sfix32_En16
  input [31:0] In10, // sfix32_En16
  input [31:0] In9, // sfix32_En16
  input [31:0] In8, // sfix32_En16
  input [31:0] In7, // sfix32_En16
  input [31:0] In6, // sfix32_En16
  input [31:0] In5, // sfix32_En16
  input [31:0] In4, // sfix32_En16
  input [31:0] In3, // sfix32_En16
  input [31:0] In2, // sfix32_En16
  input [31:0] In1 // sfix32_En16
);
wire [31:0] N_1;  
wire [3:0] N_2;  
wire [3:0] N_3;  
wire [31:0] N_Upsampler_RG30_1_530;  
wire [31:0] N_Upsampler_RG31_1_531;  
wire [31:0] N_Upsampler_RG32_1_532;  
wire [31:0] N_Upsampler_RG33_1_533;  
wire [31:0] N_Upsampler_RG34_1_534;  
wire [31:0] N_Upsampler_RG35_1_535;  
wire [31:0] N_Upsampler_RG36_1_536;  
wire [31:0] N_Upsampler_RG37_1_537;  
wire [31:0] N_Upsampler_RG38_1_538;  
wire [31:0] N_Upsampler_RG39_1_539;  
wire [31:0] N_5;  
wire [31:0] N_7;  
wire [31:0] N_8;  
wire [31:0] N_9;  
wire [31:0] N_10;  
wire [31:0] N_11;  
wire [31:0] N_12;  
wire [31:0] N_13;  
wire [31:0] N_14;  
wire [31:0] N_15;  
wire [31:0] N_16;  
wire [0:0] N_GlobalEnable10_SubSystem_Convert_AutoGen522_1_1169;  
wire [31:0] N_4;  
wire [31:0] N_6;  
wire [31:0] N_17;  
wire [0:0] N_GlobalEnable10_0_1550;  
wire [31:0] N_In1_0_1551;  
wire [31:0] N_In2_0_1552;  
wire [31:0] N_In3_0_1553;  
wire [31:0] N_In4_0_1554;  
wire [31:0] N_In5_0_1555;  
wire [31:0] N_In6_0_1556;  
wire [31:0] N_In7_0_1557;  
wire [31:0] N_In8_0_1558;  
wire [31:0] N_In9_0_1559;  
wire [31:0] N_In10_0_1560;  
wire [31:0] N_In11_0_1561;  
wire [31:0] N_Out1_1_1562;  
wire GlobalResetSel;
reg [3:0] UpsampleCounterclkDiv10Urate10;
  always @(posedge clkDiv10 )//or posedge GlobalResetSel)
  begin: ucntProc10_10_proc
    integer i;
    if(GlobalResetSel==1) 
        UpsampleCounterclkDiv10Urate10 <= 0;
      else if( GlobalEnable10==1)
        if(UpsampleCounterclkDiv10Urate10 == 9 || GlobalResetSel==1)
          UpsampleCounterclkDiv10Urate10 <= 0;
        else
          UpsampleCounterclkDiv10Urate10 <= UpsampleCounterclkDiv10Urate10+1;
    end //ucntProc10

assign Out1 = N_5;
  assign N_16 = In11;
  assign N_15 = In10;
  assign N_14 = In9;
  assign N_13 = In8;
  assign N_12 = In7;
  assign N_11 = In6;
  assign N_10 = In5;
  assign N_9 = In4;
  assign N_8 = In3;
  assign N_7 = In2;
  assign N_6 = In1;
  assign N_GlobalEnable10_SubSystem_Convert_AutoGen522_1_1169 = GlobalEnable10;
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_1), .outp(N_5) );
    synDelayWithEnable #( .bitwidth(4), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_2), .outp(N_3) );
  generate
  begin: Mux_block
    wire [31:0] med  [9:0];
    reg [31:0] tmpOut;
    assign med[0] = $signed(N_Upsampler_RG30_1_530) ;
    assign med[1] = $signed(N_Upsampler_RG31_1_531) ;
    assign med[2] = $signed(N_Upsampler_RG32_1_532) ;
    assign med[3] = $signed(N_Upsampler_RG33_1_533) ;
    assign med[4] = $signed(N_Upsampler_RG34_1_534) ;
    assign med[5] = $signed(N_Upsampler_RG35_1_535) ;
    assign med[6] = $signed(N_Upsampler_RG36_1_536) ;
    assign med[7] = $signed(N_Upsampler_RG37_1_537) ;
    assign med[8] = $signed(N_Upsampler_RG38_1_538) ;
    assign med[9] = $signed(N_Upsampler_RG39_1_539) ;

    always@(*)
    begin
      if(N_3[3:0] >= 10)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_3[3:0]];
    end

    assign N_17 = tmpOut;
  end // Mux_Block
  endgenerate
    assign N_Upsampler_RG30_1_530 = N_7; // Upsampler_RG30
    assign N_Upsampler_RG31_1_531 = N_8; // Upsampler_RG31
    assign N_Upsampler_RG32_1_532 = N_9; // Upsampler_RG32
    assign N_Upsampler_RG33_1_533 = N_10; // Upsampler_RG33
    assign N_Upsampler_RG34_1_534 = N_11; // Upsampler_RG34
    assign N_Upsampler_RG35_1_535 = N_12; // Upsampler_RG35
    assign N_Upsampler_RG36_1_536 = N_13; // Upsampler_RG36
    assign N_Upsampler_RG37_1_537 = N_14; // Upsampler_RG37
    assign N_Upsampler_RG38_1_538 = N_15; // Upsampler_RG38
    assign N_Upsampler_RG39_1_539 = N_16; // Upsampler_RG39
generate
begin:  Counter_block
wire [3:0] ldIn;
wire rst, en, enloc;
    assign enloc = 1;
    assign en = (enloc && N_GlobalEnable10_SubSystem_Convert_AutoGen522_1_1169[0]);
    assign rst = 0;
assign ldIn = 4'b0;
    synCounter #(
        .en_exists('b1),
        .rst_exists('b0),
        .ld_exists('b0),
        .rdy_exists('b0),
        .ctype(2),
        .ival(0),
        .tval(9),
        .bitwidth(4),
        .isSigned('b0)
      ) myCounter (
        .clk(clkDiv10),
        .en(en),
        .grst(GlobalResetSel),
        .rst(rst),
        .up(1'b1),
        .ld(1'b0),
        .din(ldIn),
        .rdy(),
        .cnt(N_2)
      );
    end
  endgenerate
    Subsystem_New_Activation_Gold  myNew_Activation_Gold (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .GlobalReset(GlobalResetSel),
      .In1(N_4),
      .Out1(N_1)    );
    Subsystem_Activation_Preparation_LoopLatency10_0  myActivation_Preparation_LoopLatency10_0 (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .GlobalReset(GlobalResetSel),
      .In1(N_6),
      .In2(N_17),
      .Out1(N_4)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem5 (
  input clkDiv10,
  input GlobalEnable10,
  input clkDiv100,
  input GlobalEnable100,
  input GlobalReset,
  output [31:0] Out1, // sfix32_En16
  input [31:0] In11, // sfix32_En16
  input [31:0] In10, // sfix32_En16
  input [31:0] In9, // sfix32_En16
  input [31:0] In8, // sfix32_En16
  input [31:0] In7, // sfix32_En16
  input [31:0] In6, // sfix32_En16
  input [31:0] In5, // sfix32_En16
  input [31:0] In4, // sfix32_En16
  input [31:0] In3, // sfix32_En16
  input [31:0] In2, // sfix32_En16
  input [31:0] In1 // sfix32_En16
);
wire [31:0] N_1;  
wire [3:0] N_2;  
wire [3:0] N_3;  
wire [31:0] N_Upsampler_RG40_1_540;  
wire [31:0] N_Upsampler_RG41_1_541;  
wire [31:0] N_Upsampler_RG42_1_542;  
wire [31:0] N_Upsampler_RG43_1_543;  
wire [31:0] N_Upsampler_RG44_1_544;  
wire [31:0] N_Upsampler_RG45_1_545;  
wire [31:0] N_Upsampler_RG46_1_546;  
wire [31:0] N_Upsampler_RG47_1_547;  
wire [31:0] N_Upsampler_RG48_1_548;  
wire [31:0] N_Upsampler_RG49_1_549;  
wire [31:0] N_5;  
wire [31:0] N_7;  
wire [31:0] N_8;  
wire [31:0] N_9;  
wire [31:0] N_10;  
wire [31:0] N_11;  
wire [31:0] N_12;  
wire [31:0] N_13;  
wire [31:0] N_14;  
wire [31:0] N_15;  
wire [31:0] N_16;  
wire [0:0] N_GlobalEnable10_SubSystem_Convert_AutoGen520_1_1167;  
wire [31:0] N_4;  
wire [31:0] N_6;  
wire [31:0] N_17;  
wire [0:0] N_GlobalEnable10_0_1569;  
wire [31:0] N_In1_0_1570;  
wire [31:0] N_In2_0_1571;  
wire [31:0] N_In3_0_1572;  
wire [31:0] N_In4_0_1573;  
wire [31:0] N_In5_0_1574;  
wire [31:0] N_In6_0_1575;  
wire [31:0] N_In7_0_1576;  
wire [31:0] N_In8_0_1577;  
wire [31:0] N_In9_0_1578;  
wire [31:0] N_In10_0_1579;  
wire [31:0] N_In11_0_1580;  
wire [31:0] N_Out1_1_1581;  
wire GlobalResetSel;
reg [3:0] UpsampleCounterclkDiv10Urate10;
  always @(posedge clkDiv10 )//or posedge GlobalResetSel)
  begin: ucntProc10_10_proc
    integer i;
    if(GlobalResetSel==1) 
        UpsampleCounterclkDiv10Urate10 <= 0;
      else if( GlobalEnable10==1)
        if(UpsampleCounterclkDiv10Urate10 == 9 || GlobalResetSel==1)
          UpsampleCounterclkDiv10Urate10 <= 0;
        else
          UpsampleCounterclkDiv10Urate10 <= UpsampleCounterclkDiv10Urate10+1;
    end //ucntProc10

assign Out1 = N_5;
  assign N_16 = In11;
  assign N_15 = In10;
  assign N_14 = In9;
  assign N_13 = In8;
  assign N_12 = In7;
  assign N_11 = In6;
  assign N_10 = In5;
  assign N_9 = In4;
  assign N_8 = In3;
  assign N_7 = In2;
  assign N_6 = In1;
  assign N_GlobalEnable10_SubSystem_Convert_AutoGen520_1_1167 = GlobalEnable10;
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_1), .outp(N_5) );
    synDelayWithEnable #( .bitwidth(4), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_2), .outp(N_3) );
  generate
  begin: Mux_block
    wire [31:0] med  [9:0];
    reg [31:0] tmpOut;
    assign med[0] = $signed(N_Upsampler_RG40_1_540) ;
    assign med[1] = $signed(N_Upsampler_RG41_1_541) ;
    assign med[2] = $signed(N_Upsampler_RG42_1_542) ;
    assign med[3] = $signed(N_Upsampler_RG43_1_543) ;
    assign med[4] = $signed(N_Upsampler_RG44_1_544) ;
    assign med[5] = $signed(N_Upsampler_RG45_1_545) ;
    assign med[6] = $signed(N_Upsampler_RG46_1_546) ;
    assign med[7] = $signed(N_Upsampler_RG47_1_547) ;
    assign med[8] = $signed(N_Upsampler_RG48_1_548) ;
    assign med[9] = $signed(N_Upsampler_RG49_1_549) ;

    always@(*)
    begin
      if(N_3[3:0] >= 10)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_3[3:0]];
    end

    assign N_17 = tmpOut;
  end // Mux_Block
  endgenerate
    assign N_Upsampler_RG40_1_540 = N_7; // Upsampler_RG40
    assign N_Upsampler_RG41_1_541 = N_8; // Upsampler_RG41
    assign N_Upsampler_RG42_1_542 = N_9; // Upsampler_RG42
    assign N_Upsampler_RG43_1_543 = N_10; // Upsampler_RG43
    assign N_Upsampler_RG44_1_544 = N_11; // Upsampler_RG44
    assign N_Upsampler_RG45_1_545 = N_12; // Upsampler_RG45
    assign N_Upsampler_RG46_1_546 = N_13; // Upsampler_RG46
    assign N_Upsampler_RG47_1_547 = N_14; // Upsampler_RG47
    assign N_Upsampler_RG48_1_548 = N_15; // Upsampler_RG48
    assign N_Upsampler_RG49_1_549 = N_16; // Upsampler_RG49
generate
begin:  Counter_block
wire [3:0] ldIn;
wire rst, en, enloc;
    assign enloc = 1;
    assign en = (enloc && N_GlobalEnable10_SubSystem_Convert_AutoGen520_1_1167[0]);
    assign rst = 0;
assign ldIn = 4'b0;
    synCounter #(
        .en_exists('b1),
        .rst_exists('b0),
        .ld_exists('b0),
        .rdy_exists('b0),
        .ctype(2),
        .ival(0),
        .tval(9),
        .bitwidth(4),
        .isSigned('b0)
      ) myCounter (
        .clk(clkDiv10),
        .en(en),
        .grst(GlobalResetSel),
        .rst(rst),
        .up(1'b1),
        .ld(1'b0),
        .din(ldIn),
        .rdy(),
        .cnt(N_2)
      );
    end
  endgenerate
    Subsystem_New_Activation_Gold  myNew_Activation_Gold (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .GlobalReset(GlobalResetSel),
      .In1(N_4),
      .Out1(N_1)    );
    Subsystem_Activation_Preparation_LoopLatency10_0  myActivation_Preparation_LoopLatency10_0 (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .GlobalReset(GlobalResetSel),
      .In1(N_6),
      .In2(N_17),
      .Out1(N_4)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem4 (
  input clkDiv10,
  input GlobalEnable10,
  input clkDiv100,
  input GlobalEnable100,
  input GlobalReset,
  output [31:0] Out1, // sfix32_En16
  input [31:0] In11, // sfix32_En16
  input [31:0] In10, // sfix32_En16
  input [31:0] In9, // sfix32_En16
  input [31:0] In8, // sfix32_En16
  input [31:0] In7, // sfix32_En16
  input [31:0] In6, // sfix32_En16
  input [31:0] In5, // sfix32_En16
  input [31:0] In4, // sfix32_En16
  input [31:0] In3, // sfix32_En16
  input [31:0] In2, // sfix32_En16
  input [31:0] In1 // sfix32_En16
);
wire [31:0] N_1;  
wire [3:0] N_2;  
wire [3:0] N_3;  
wire [31:0] N_Upsampler_RG50_1_550;  
wire [31:0] N_Upsampler_RG51_1_551;  
wire [31:0] N_Upsampler_RG52_1_552;  
wire [31:0] N_Upsampler_RG53_1_553;  
wire [31:0] N_Upsampler_RG54_1_554;  
wire [31:0] N_Upsampler_RG55_1_555;  
wire [31:0] N_Upsampler_RG56_1_556;  
wire [31:0] N_Upsampler_RG57_1_557;  
wire [31:0] N_Upsampler_RG58_1_558;  
wire [31:0] N_Upsampler_RG59_1_559;  
wire [31:0] N_5;  
wire [31:0] N_7;  
wire [31:0] N_8;  
wire [31:0] N_9;  
wire [31:0] N_10;  
wire [31:0] N_11;  
wire [31:0] N_12;  
wire [31:0] N_13;  
wire [31:0] N_14;  
wire [31:0] N_15;  
wire [31:0] N_16;  
wire [0:0] N_GlobalEnable10_SubSystem_Convert_AutoGen518_1_1165;  
wire [31:0] N_4;  
wire [31:0] N_6;  
wire [31:0] N_17;  
wire [0:0] N_GlobalEnable10_0_1588;  
wire [31:0] N_In1_0_1589;  
wire [31:0] N_In2_0_1590;  
wire [31:0] N_In3_0_1591;  
wire [31:0] N_In4_0_1592;  
wire [31:0] N_In5_0_1593;  
wire [31:0] N_In6_0_1594;  
wire [31:0] N_In7_0_1595;  
wire [31:0] N_In8_0_1596;  
wire [31:0] N_In9_0_1597;  
wire [31:0] N_In10_0_1598;  
wire [31:0] N_In11_0_1599;  
wire [31:0] N_Out1_1_1600;  
wire GlobalResetSel;
reg [3:0] UpsampleCounterclkDiv10Urate10;
  always @(posedge clkDiv10 )//or posedge GlobalResetSel)
  begin: ucntProc10_10_proc
    integer i;
    if(GlobalResetSel==1) 
        UpsampleCounterclkDiv10Urate10 <= 0;
      else if( GlobalEnable10==1)
        if(UpsampleCounterclkDiv10Urate10 == 9 || GlobalResetSel==1)
          UpsampleCounterclkDiv10Urate10 <= 0;
        else
          UpsampleCounterclkDiv10Urate10 <= UpsampleCounterclkDiv10Urate10+1;
    end //ucntProc10

assign Out1 = N_5;
  assign N_16 = In11;
  assign N_15 = In10;
  assign N_14 = In9;
  assign N_13 = In8;
  assign N_12 = In7;
  assign N_11 = In6;
  assign N_10 = In5;
  assign N_9 = In4;
  assign N_8 = In3;
  assign N_7 = In2;
  assign N_6 = In1;
  assign N_GlobalEnable10_SubSystem_Convert_AutoGen518_1_1165 = GlobalEnable10;
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_1), .outp(N_5) );
    synDelayWithEnable #( .bitwidth(4), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_2), .outp(N_3) );
  generate
  begin: Mux_block
    wire [31:0] med  [9:0];
    reg [31:0] tmpOut;
    assign med[0] = $signed(N_Upsampler_RG50_1_550) ;
    assign med[1] = $signed(N_Upsampler_RG51_1_551) ;
    assign med[2] = $signed(N_Upsampler_RG52_1_552) ;
    assign med[3] = $signed(N_Upsampler_RG53_1_553) ;
    assign med[4] = $signed(N_Upsampler_RG54_1_554) ;
    assign med[5] = $signed(N_Upsampler_RG55_1_555) ;
    assign med[6] = $signed(N_Upsampler_RG56_1_556) ;
    assign med[7] = $signed(N_Upsampler_RG57_1_557) ;
    assign med[8] = $signed(N_Upsampler_RG58_1_558) ;
    assign med[9] = $signed(N_Upsampler_RG59_1_559) ;

    always@(*)
    begin
      if(N_3[3:0] >= 10)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_3[3:0]];
    end

    assign N_17 = tmpOut;
  end // Mux_Block
  endgenerate
    assign N_Upsampler_RG50_1_550 = N_7; // Upsampler_RG50
    assign N_Upsampler_RG51_1_551 = N_8; // Upsampler_RG51
    assign N_Upsampler_RG52_1_552 = N_9; // Upsampler_RG52
    assign N_Upsampler_RG53_1_553 = N_10; // Upsampler_RG53
    assign N_Upsampler_RG54_1_554 = N_11; // Upsampler_RG54
    assign N_Upsampler_RG55_1_555 = N_12; // Upsampler_RG55
    assign N_Upsampler_RG56_1_556 = N_13; // Upsampler_RG56
    assign N_Upsampler_RG57_1_557 = N_14; // Upsampler_RG57
    assign N_Upsampler_RG58_1_558 = N_15; // Upsampler_RG58
    assign N_Upsampler_RG59_1_559 = N_16; // Upsampler_RG59
generate
begin:  Counter_block
wire [3:0] ldIn;
wire rst, en, enloc;
    assign enloc = 1;
    assign en = (enloc && N_GlobalEnable10_SubSystem_Convert_AutoGen518_1_1165[0]);
    assign rst = 0;
assign ldIn = 4'b0;
    synCounter #(
        .en_exists('b1),
        .rst_exists('b0),
        .ld_exists('b0),
        .rdy_exists('b0),
        .ctype(2),
        .ival(0),
        .tval(9),
        .bitwidth(4),
        .isSigned('b0)
      ) myCounter (
        .clk(clkDiv10),
        .en(en),
        .grst(GlobalResetSel),
        .rst(rst),
        .up(1'b1),
        .ld(1'b0),
        .din(ldIn),
        .rdy(),
        .cnt(N_2)
      );
    end
  endgenerate
    Subsystem_New_Activation_Gold  myNew_Activation_Gold (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .GlobalReset(GlobalResetSel),
      .In1(N_4),
      .Out1(N_1)    );
    Subsystem_Activation_Preparation_LoopLatency10_0  myActivation_Preparation_LoopLatency10_0 (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .GlobalReset(GlobalResetSel),
      .In1(N_6),
      .In2(N_17),
      .Out1(N_4)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem3 (
  input clkDiv10,
  input GlobalEnable10,
  input clkDiv100,
  input GlobalEnable100,
  input GlobalReset,
  output [31:0] Out1, // sfix32_En16
  input [31:0] In11, // sfix32_En16
  input [31:0] In10, // sfix32_En16
  input [31:0] In9, // sfix32_En16
  input [31:0] In8, // sfix32_En16
  input [31:0] In7, // sfix32_En16
  input [31:0] In6, // sfix32_En16
  input [31:0] In5, // sfix32_En16
  input [31:0] In4, // sfix32_En16
  input [31:0] In3, // sfix32_En16
  input [31:0] In2, // sfix32_En16
  input [31:0] In1 // sfix32_En16
);
wire [31:0] N_1;  
wire [3:0] N_2;  
wire [3:0] N_3;  
wire [31:0] N_Upsampler_RG60_1_560;  
wire [31:0] N_Upsampler_RG61_1_561;  
wire [31:0] N_Upsampler_RG62_1_562;  
wire [31:0] N_Upsampler_RG63_1_563;  
wire [31:0] N_Upsampler_RG64_1_564;  
wire [31:0] N_Upsampler_RG65_1_565;  
wire [31:0] N_Upsampler_RG66_1_566;  
wire [31:0] N_Upsampler_RG67_1_567;  
wire [31:0] N_Upsampler_RG68_1_568;  
wire [31:0] N_Upsampler_RG69_1_569;  
wire [31:0] N_5;  
wire [31:0] N_7;  
wire [31:0] N_8;  
wire [31:0] N_9;  
wire [31:0] N_10;  
wire [31:0] N_11;  
wire [31:0] N_12;  
wire [31:0] N_13;  
wire [31:0] N_14;  
wire [31:0] N_15;  
wire [31:0] N_16;  
wire [0:0] N_GlobalEnable10_SubSystem_Convert_AutoGen516_1_1163;  
wire [31:0] N_4;  
wire [31:0] N_6;  
wire [31:0] N_17;  
wire [0:0] N_GlobalEnable10_0_1607;  
wire [31:0] N_In1_0_1608;  
wire [31:0] N_In2_0_1609;  
wire [31:0] N_In3_0_1610;  
wire [31:0] N_In4_0_1611;  
wire [31:0] N_In5_0_1612;  
wire [31:0] N_In6_0_1613;  
wire [31:0] N_In7_0_1614;  
wire [31:0] N_In8_0_1615;  
wire [31:0] N_In9_0_1616;  
wire [31:0] N_In10_0_1617;  
wire [31:0] N_In11_0_1618;  
wire [31:0] N_Out1_1_1619;  
wire GlobalResetSel;
reg [3:0] UpsampleCounterclkDiv10Urate10;
  always @(posedge clkDiv10 )//or posedge GlobalResetSel)
  begin: ucntProc10_10_proc
    integer i;
    if(GlobalResetSel==1) 
        UpsampleCounterclkDiv10Urate10 <= 0;
      else if( GlobalEnable10==1)
        if(UpsampleCounterclkDiv10Urate10 == 9 || GlobalResetSel==1)
          UpsampleCounterclkDiv10Urate10 <= 0;
        else
          UpsampleCounterclkDiv10Urate10 <= UpsampleCounterclkDiv10Urate10+1;
    end //ucntProc10

assign Out1 = N_5;
  assign N_16 = In11;
  assign N_15 = In10;
  assign N_14 = In9;
  assign N_13 = In8;
  assign N_12 = In7;
  assign N_11 = In6;
  assign N_10 = In5;
  assign N_9 = In4;
  assign N_8 = In3;
  assign N_7 = In2;
  assign N_6 = In1;
  assign N_GlobalEnable10_SubSystem_Convert_AutoGen516_1_1163 = GlobalEnable10;
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_1), .outp(N_5) );
    synDelayWithEnable #( .bitwidth(4), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_2), .outp(N_3) );
  generate
  begin: Mux_block
    wire [31:0] med  [9:0];
    reg [31:0] tmpOut;
    assign med[0] = $signed(N_Upsampler_RG60_1_560) ;
    assign med[1] = $signed(N_Upsampler_RG61_1_561) ;
    assign med[2] = $signed(N_Upsampler_RG62_1_562) ;
    assign med[3] = $signed(N_Upsampler_RG63_1_563) ;
    assign med[4] = $signed(N_Upsampler_RG64_1_564) ;
    assign med[5] = $signed(N_Upsampler_RG65_1_565) ;
    assign med[6] = $signed(N_Upsampler_RG66_1_566) ;
    assign med[7] = $signed(N_Upsampler_RG67_1_567) ;
    assign med[8] = $signed(N_Upsampler_RG68_1_568) ;
    assign med[9] = $signed(N_Upsampler_RG69_1_569) ;

    always@(*)
    begin
      if(N_3[3:0] >= 10)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_3[3:0]];
    end

    assign N_17 = tmpOut;
  end // Mux_Block
  endgenerate
    assign N_Upsampler_RG60_1_560 = N_7; // Upsampler_RG60
    assign N_Upsampler_RG61_1_561 = N_8; // Upsampler_RG61
    assign N_Upsampler_RG62_1_562 = N_9; // Upsampler_RG62
    assign N_Upsampler_RG63_1_563 = N_10; // Upsampler_RG63
    assign N_Upsampler_RG64_1_564 = N_11; // Upsampler_RG64
    assign N_Upsampler_RG65_1_565 = N_12; // Upsampler_RG65
    assign N_Upsampler_RG66_1_566 = N_13; // Upsampler_RG66
    assign N_Upsampler_RG67_1_567 = N_14; // Upsampler_RG67
    assign N_Upsampler_RG68_1_568 = N_15; // Upsampler_RG68
    assign N_Upsampler_RG69_1_569 = N_16; // Upsampler_RG69
generate
begin:  Counter_block
wire [3:0] ldIn;
wire rst, en, enloc;
    assign enloc = 1;
    assign en = (enloc && N_GlobalEnable10_SubSystem_Convert_AutoGen516_1_1163[0]);
    assign rst = 0;
assign ldIn = 4'b0;
    synCounter #(
        .en_exists('b1),
        .rst_exists('b0),
        .ld_exists('b0),
        .rdy_exists('b0),
        .ctype(2),
        .ival(0),
        .tval(9),
        .bitwidth(4),
        .isSigned('b0)
      ) myCounter (
        .clk(clkDiv10),
        .en(en),
        .grst(GlobalResetSel),
        .rst(rst),
        .up(1'b1),
        .ld(1'b0),
        .din(ldIn),
        .rdy(),
        .cnt(N_2)
      );
    end
  endgenerate
    Subsystem_New_Activation_Gold  myNew_Activation_Gold (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .GlobalReset(GlobalResetSel),
      .In1(N_4),
      .Out1(N_1)    );
    Subsystem_Activation_Preparation_LoopLatency10_0  myActivation_Preparation_LoopLatency10_0 (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .GlobalReset(GlobalResetSel),
      .In1(N_6),
      .In2(N_17),
      .Out1(N_4)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem2 (
  input clkDiv10,
  input GlobalEnable10,
  input clkDiv100,
  input GlobalEnable100,
  input GlobalReset,
  output [31:0] Out1, // sfix32_En16
  input [31:0] In11, // sfix32_En16
  input [31:0] In10, // sfix32_En16
  input [31:0] In9, // sfix32_En16
  input [31:0] In8, // sfix32_En16
  input [31:0] In7, // sfix32_En16
  input [31:0] In6, // sfix32_En16
  input [31:0] In5, // sfix32_En16
  input [31:0] In4, // sfix32_En16
  input [31:0] In3, // sfix32_En16
  input [31:0] In2, // sfix32_En16
  input [31:0] In1 // sfix32_En16
);
wire [31:0] N_1;  
wire [3:0] N_2;  
wire [3:0] N_3;  
wire [31:0] N_Upsampler_RG70_1_570;  
wire [31:0] N_Upsampler_RG71_1_571;  
wire [31:0] N_Upsampler_RG72_1_572;  
wire [31:0] N_Upsampler_RG73_1_573;  
wire [31:0] N_Upsampler_RG74_1_574;  
wire [31:0] N_Upsampler_RG75_1_575;  
wire [31:0] N_Upsampler_RG76_1_576;  
wire [31:0] N_Upsampler_RG77_1_577;  
wire [31:0] N_Upsampler_RG78_1_578;  
wire [31:0] N_Upsampler_RG79_1_579;  
wire [31:0] N_5;  
wire [31:0] N_7;  
wire [31:0] N_8;  
wire [31:0] N_9;  
wire [31:0] N_10;  
wire [31:0] N_11;  
wire [31:0] N_12;  
wire [31:0] N_13;  
wire [31:0] N_14;  
wire [31:0] N_15;  
wire [31:0] N_16;  
wire [0:0] N_GlobalEnable10_SubSystem_Convert_AutoGen514_1_1161;  
wire [31:0] N_4;  
wire [31:0] N_6;  
wire [31:0] N_17;  
wire [0:0] N_GlobalEnable10_0_1626;  
wire [31:0] N_In1_0_1627;  
wire [31:0] N_In2_0_1628;  
wire [31:0] N_In3_0_1629;  
wire [31:0] N_In4_0_1630;  
wire [31:0] N_In5_0_1631;  
wire [31:0] N_In6_0_1632;  
wire [31:0] N_In7_0_1633;  
wire [31:0] N_In8_0_1634;  
wire [31:0] N_In9_0_1635;  
wire [31:0] N_In10_0_1636;  
wire [31:0] N_In11_0_1637;  
wire [31:0] N_Out1_1_1638;  
wire GlobalResetSel;
reg [3:0] UpsampleCounterclkDiv10Urate10;
  always @(posedge clkDiv10 )//or posedge GlobalResetSel)
  begin: ucntProc10_10_proc
    integer i;
    if(GlobalResetSel==1) 
        UpsampleCounterclkDiv10Urate10 <= 0;
      else if( GlobalEnable10==1)
        if(UpsampleCounterclkDiv10Urate10 == 9 || GlobalResetSel==1)
          UpsampleCounterclkDiv10Urate10 <= 0;
        else
          UpsampleCounterclkDiv10Urate10 <= UpsampleCounterclkDiv10Urate10+1;
    end //ucntProc10

assign Out1 = N_5;
  assign N_16 = In11;
  assign N_15 = In10;
  assign N_14 = In9;
  assign N_13 = In8;
  assign N_12 = In7;
  assign N_11 = In6;
  assign N_10 = In5;
  assign N_9 = In4;
  assign N_8 = In3;
  assign N_7 = In2;
  assign N_6 = In1;
  assign N_GlobalEnable10_SubSystem_Convert_AutoGen514_1_1161 = GlobalEnable10;
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_1), .outp(N_5) );
    synDelayWithEnable #( .bitwidth(4), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_2), .outp(N_3) );
  generate
  begin: Mux_block
    wire [31:0] med  [9:0];
    reg [31:0] tmpOut;
    assign med[0] = $signed(N_Upsampler_RG70_1_570) ;
    assign med[1] = $signed(N_Upsampler_RG71_1_571) ;
    assign med[2] = $signed(N_Upsampler_RG72_1_572) ;
    assign med[3] = $signed(N_Upsampler_RG73_1_573) ;
    assign med[4] = $signed(N_Upsampler_RG74_1_574) ;
    assign med[5] = $signed(N_Upsampler_RG75_1_575) ;
    assign med[6] = $signed(N_Upsampler_RG76_1_576) ;
    assign med[7] = $signed(N_Upsampler_RG77_1_577) ;
    assign med[8] = $signed(N_Upsampler_RG78_1_578) ;
    assign med[9] = $signed(N_Upsampler_RG79_1_579) ;

    always@(*)
    begin
      if(N_3[3:0] >= 10)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_3[3:0]];
    end

    assign N_17 = tmpOut;
  end // Mux_Block
  endgenerate
    assign N_Upsampler_RG70_1_570 = N_7; // Upsampler_RG70
    assign N_Upsampler_RG71_1_571 = N_8; // Upsampler_RG71
    assign N_Upsampler_RG72_1_572 = N_9; // Upsampler_RG72
    assign N_Upsampler_RG73_1_573 = N_10; // Upsampler_RG73
    assign N_Upsampler_RG74_1_574 = N_11; // Upsampler_RG74
    assign N_Upsampler_RG75_1_575 = N_12; // Upsampler_RG75
    assign N_Upsampler_RG76_1_576 = N_13; // Upsampler_RG76
    assign N_Upsampler_RG77_1_577 = N_14; // Upsampler_RG77
    assign N_Upsampler_RG78_1_578 = N_15; // Upsampler_RG78
    assign N_Upsampler_RG79_1_579 = N_16; // Upsampler_RG79
generate
begin:  Counter_block
wire [3:0] ldIn;
wire rst, en, enloc;
    assign enloc = 1;
    assign en = (enloc && N_GlobalEnable10_SubSystem_Convert_AutoGen514_1_1161[0]);
    assign rst = 0;
assign ldIn = 4'b0;
    synCounter #(
        .en_exists('b1),
        .rst_exists('b0),
        .ld_exists('b0),
        .rdy_exists('b0),
        .ctype(2),
        .ival(0),
        .tval(9),
        .bitwidth(4),
        .isSigned('b0)
      ) myCounter (
        .clk(clkDiv10),
        .en(en),
        .grst(GlobalResetSel),
        .rst(rst),
        .up(1'b1),
        .ld(1'b0),
        .din(ldIn),
        .rdy(),
        .cnt(N_2)
      );
    end
  endgenerate
    Subsystem_New_Activation_Gold  myNew_Activation_Gold (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .GlobalReset(GlobalResetSel),
      .In1(N_4),
      .Out1(N_1)    );
    Subsystem_Activation_Preparation_LoopLatency10_0  myActivation_Preparation_LoopLatency10_0 (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .GlobalReset(GlobalResetSel),
      .In1(N_6),
      .In2(N_17),
      .Out1(N_4)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem1 (
  input clkDiv10,
  input GlobalEnable10,
  input clkDiv100,
  input GlobalEnable100,
  input GlobalReset,
  output [31:0] Out1, // sfix32_En16
  input [31:0] In11, // sfix32_En16
  input [31:0] In10, // sfix32_En16
  input [31:0] In9, // sfix32_En16
  input [31:0] In8, // sfix32_En16
  input [31:0] In7, // sfix32_En16
  input [31:0] In6, // sfix32_En16
  input [31:0] In5, // sfix32_En16
  input [31:0] In4, // sfix32_En16
  input [31:0] In3, // sfix32_En16
  input [31:0] In2, // sfix32_En16
  input [31:0] In1 // sfix32_En16
);
wire [31:0] N_1;  
wire [3:0] N_2;  
wire [3:0] N_3;  
wire [31:0] N_Upsampler_RG80_1_580;  
wire [31:0] N_Upsampler_RG81_1_581;  
wire [31:0] N_Upsampler_RG82_1_582;  
wire [31:0] N_Upsampler_RG83_1_583;  
wire [31:0] N_Upsampler_RG84_1_584;  
wire [31:0] N_Upsampler_RG85_1_585;  
wire [31:0] N_Upsampler_RG86_1_586;  
wire [31:0] N_Upsampler_RG87_1_587;  
wire [31:0] N_Upsampler_RG88_1_588;  
wire [31:0] N_Upsampler_RG89_1_589;  
wire [31:0] N_5;  
wire [31:0] N_7;  
wire [31:0] N_8;  
wire [31:0] N_9;  
wire [31:0] N_10;  
wire [31:0] N_11;  
wire [31:0] N_12;  
wire [31:0] N_13;  
wire [31:0] N_14;  
wire [31:0] N_15;  
wire [31:0] N_16;  
wire [0:0] N_GlobalEnable10_SubSystem_Convert_AutoGen512_1_1159;  
wire [31:0] N_4;  
wire [31:0] N_6;  
wire [31:0] N_17;  
wire [0:0] N_GlobalEnable10_0_1645;  
wire [31:0] N_In1_0_1646;  
wire [31:0] N_In2_0_1647;  
wire [31:0] N_In3_0_1648;  
wire [31:0] N_In4_0_1649;  
wire [31:0] N_In5_0_1650;  
wire [31:0] N_In6_0_1651;  
wire [31:0] N_In7_0_1652;  
wire [31:0] N_In8_0_1653;  
wire [31:0] N_In9_0_1654;  
wire [31:0] N_In10_0_1655;  
wire [31:0] N_In11_0_1656;  
wire [31:0] N_Out1_1_1657;  
wire GlobalResetSel;
reg [3:0] UpsampleCounterclkDiv10Urate10;
  always @(posedge clkDiv10 )//or posedge GlobalResetSel)
  begin: ucntProc10_10_proc
    integer i;
    if(GlobalResetSel==1) 
        UpsampleCounterclkDiv10Urate10 <= 0;
      else if( GlobalEnable10==1)
        if(UpsampleCounterclkDiv10Urate10 == 9 || GlobalResetSel==1)
          UpsampleCounterclkDiv10Urate10 <= 0;
        else
          UpsampleCounterclkDiv10Urate10 <= UpsampleCounterclkDiv10Urate10+1;
    end //ucntProc10

assign Out1 = N_5;
  assign N_16 = In11;
  assign N_15 = In10;
  assign N_14 = In9;
  assign N_13 = In8;
  assign N_12 = In7;
  assign N_11 = In6;
  assign N_10 = In5;
  assign N_9 = In4;
  assign N_8 = In3;
  assign N_7 = In2;
  assign N_6 = In1;
  assign N_GlobalEnable10_SubSystem_Convert_AutoGen512_1_1159 = GlobalEnable10;
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_1), .outp(N_5) );
    synDelayWithEnable #( .bitwidth(4), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_2), .outp(N_3) );
  generate
  begin: Mux_block
    wire [31:0] med  [9:0];
    reg [31:0] tmpOut;
    assign med[0] = $signed(N_Upsampler_RG80_1_580) ;
    assign med[1] = $signed(N_Upsampler_RG81_1_581) ;
    assign med[2] = $signed(N_Upsampler_RG82_1_582) ;
    assign med[3] = $signed(N_Upsampler_RG83_1_583) ;
    assign med[4] = $signed(N_Upsampler_RG84_1_584) ;
    assign med[5] = $signed(N_Upsampler_RG85_1_585) ;
    assign med[6] = $signed(N_Upsampler_RG86_1_586) ;
    assign med[7] = $signed(N_Upsampler_RG87_1_587) ;
    assign med[8] = $signed(N_Upsampler_RG88_1_588) ;
    assign med[9] = $signed(N_Upsampler_RG89_1_589) ;

    always@(*)
    begin
      if(N_3[3:0] >= 10)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_3[3:0]];
    end

    assign N_17 = tmpOut;
  end // Mux_Block
  endgenerate
    assign N_Upsampler_RG80_1_580 = N_7; // Upsampler_RG80
    assign N_Upsampler_RG81_1_581 = N_8; // Upsampler_RG81
    assign N_Upsampler_RG82_1_582 = N_9; // Upsampler_RG82
    assign N_Upsampler_RG83_1_583 = N_10; // Upsampler_RG83
    assign N_Upsampler_RG84_1_584 = N_11; // Upsampler_RG84
    assign N_Upsampler_RG85_1_585 = N_12; // Upsampler_RG85
    assign N_Upsampler_RG86_1_586 = N_13; // Upsampler_RG86
    assign N_Upsampler_RG87_1_587 = N_14; // Upsampler_RG87
    assign N_Upsampler_RG88_1_588 = N_15; // Upsampler_RG88
    assign N_Upsampler_RG89_1_589 = N_16; // Upsampler_RG89
generate
begin:  Counter_block
wire [3:0] ldIn;
wire rst, en, enloc;
    assign enloc = 1;
    assign en = (enloc && N_GlobalEnable10_SubSystem_Convert_AutoGen512_1_1159[0]);
    assign rst = 0;
assign ldIn = 4'b0;
    synCounter #(
        .en_exists('b1),
        .rst_exists('b0),
        .ld_exists('b0),
        .rdy_exists('b0),
        .ctype(2),
        .ival(0),
        .tval(9),
        .bitwidth(4),
        .isSigned('b0)
      ) myCounter (
        .clk(clkDiv10),
        .en(en),
        .grst(GlobalResetSel),
        .rst(rst),
        .up(1'b1),
        .ld(1'b0),
        .din(ldIn),
        .rdy(),
        .cnt(N_2)
      );
    end
  endgenerate
    Subsystem_New_Activation_Gold  myNew_Activation_Gold (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .GlobalReset(GlobalResetSel),
      .In1(N_4),
      .Out1(N_1)    );
    Subsystem_Activation_Preparation_LoopLatency10_0  myActivation_Preparation_LoopLatency10_0 (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .GlobalReset(GlobalResetSel),
      .In1(N_6),
      .In2(N_17),
      .Out1(N_4)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem (
  input clkDiv10,
  input GlobalEnable10,
  input clkDiv100,
  input GlobalEnable100,
  input GlobalReset,
  output [31:0] Out1, // sfix32_En16
  input [31:0] In11, // sfix32_En16
  input [31:0] In10, // sfix32_En16
  input [31:0] In9, // sfix32_En16
  input [31:0] In8, // sfix32_En16
  input [31:0] In7, // sfix32_En16
  input [31:0] In6, // sfix32_En16
  input [31:0] In5, // sfix32_En16
  input [31:0] In4, // sfix32_En16
  input [31:0] In3, // sfix32_En16
  input [31:0] In2, // sfix32_En16
  input [31:0] In1 // sfix32_En16
);
wire [31:0] N_1;  
wire [3:0] N_2;  
wire [3:0] N_3;  
wire [31:0] N_Upsampler_RG90_1_590;  
wire [31:0] N_Upsampler_RG91_1_591;  
wire [31:0] N_Upsampler_RG92_1_592;  
wire [31:0] N_Upsampler_RG93_1_593;  
wire [31:0] N_Upsampler_RG94_1_594;  
wire [31:0] N_Upsampler_RG95_1_595;  
wire [31:0] N_Upsampler_RG96_1_596;  
wire [31:0] N_Upsampler_RG97_1_597;  
wire [31:0] N_Upsampler_RG98_1_598;  
wire [31:0] N_Upsampler_RG99_1_599;  
wire [31:0] N_5;  
wire [31:0] N_7;  
wire [31:0] N_8;  
wire [31:0] N_9;  
wire [31:0] N_10;  
wire [31:0] N_11;  
wire [31:0] N_12;  
wire [31:0] N_13;  
wire [31:0] N_14;  
wire [31:0] N_15;  
wire [31:0] N_16;  
wire [0:0] N_GlobalEnable10_SubSystem_Convert_AutoGen510_1_1157;  
wire [31:0] N_4;  
wire [31:0] N_6;  
wire [31:0] N_17;  
wire [0:0] N_GlobalEnable10_0_1664;  
wire [31:0] N_In1_0_1665;  
wire [31:0] N_In2_0_1666;  
wire [31:0] N_In3_0_1667;  
wire [31:0] N_In4_0_1668;  
wire [31:0] N_In5_0_1669;  
wire [31:0] N_In6_0_1670;  
wire [31:0] N_In7_0_1671;  
wire [31:0] N_In8_0_1672;  
wire [31:0] N_In9_0_1673;  
wire [31:0] N_In10_0_1674;  
wire [31:0] N_In11_0_1675;  
wire [31:0] N_Out1_1_1676;  
wire GlobalResetSel;
reg [3:0] UpsampleCounterclkDiv10Urate10;
  always @(posedge clkDiv10 )//or posedge GlobalResetSel)
  begin: ucntProc10_10_proc
    integer i;
    if(GlobalResetSel==1) 
        UpsampleCounterclkDiv10Urate10 <= 0;
      else if( GlobalEnable10==1)
        if(UpsampleCounterclkDiv10Urate10 == 9 || GlobalResetSel==1)
          UpsampleCounterclkDiv10Urate10 <= 0;
        else
          UpsampleCounterclkDiv10Urate10 <= UpsampleCounterclkDiv10Urate10+1;
    end //ucntProc10

assign Out1 = N_5;
  assign N_16 = In11;
  assign N_15 = In10;
  assign N_14 = In9;
  assign N_13 = In8;
  assign N_12 = In7;
  assign N_11 = In6;
  assign N_10 = In5;
  assign N_9 = In4;
  assign N_8 = In3;
  assign N_7 = In2;
  assign N_6 = In1;
  assign N_GlobalEnable10_SubSystem_Convert_AutoGen510_1_1157 = GlobalEnable10;
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_1), .outp(N_5) );
    synDelayWithEnable #( .bitwidth(4), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_2), .outp(N_3) );
  generate
  begin: Mux_block
    wire [31:0] med  [9:0];
    reg [31:0] tmpOut;
    assign med[0] = $signed(N_Upsampler_RG90_1_590) ;
    assign med[1] = $signed(N_Upsampler_RG91_1_591) ;
    assign med[2] = $signed(N_Upsampler_RG92_1_592) ;
    assign med[3] = $signed(N_Upsampler_RG93_1_593) ;
    assign med[4] = $signed(N_Upsampler_RG94_1_594) ;
    assign med[5] = $signed(N_Upsampler_RG95_1_595) ;
    assign med[6] = $signed(N_Upsampler_RG96_1_596) ;
    assign med[7] = $signed(N_Upsampler_RG97_1_597) ;
    assign med[8] = $signed(N_Upsampler_RG98_1_598) ;
    assign med[9] = $signed(N_Upsampler_RG99_1_599) ;

    always@(*)
    begin
      if(N_3[3:0] >= 10)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_3[3:0]];
    end

    assign N_17 = tmpOut;
  end // Mux_Block
  endgenerate
    assign N_Upsampler_RG90_1_590 = N_7; // Upsampler_RG90
    assign N_Upsampler_RG91_1_591 = N_8; // Upsampler_RG91
    assign N_Upsampler_RG92_1_592 = N_9; // Upsampler_RG92
    assign N_Upsampler_RG93_1_593 = N_10; // Upsampler_RG93
    assign N_Upsampler_RG94_1_594 = N_11; // Upsampler_RG94
    assign N_Upsampler_RG95_1_595 = N_12; // Upsampler_RG95
    assign N_Upsampler_RG96_1_596 = N_13; // Upsampler_RG96
    assign N_Upsampler_RG97_1_597 = N_14; // Upsampler_RG97
    assign N_Upsampler_RG98_1_598 = N_15; // Upsampler_RG98
    assign N_Upsampler_RG99_1_599 = N_16; // Upsampler_RG99
generate
begin:  Counter_block
wire [3:0] ldIn;
wire rst, en, enloc;
    assign enloc = 1;
    assign en = (enloc && N_GlobalEnable10_SubSystem_Convert_AutoGen510_1_1157[0]);
    assign rst = 0;
assign ldIn = 4'b0;
    synCounter #(
        .en_exists('b1),
        .rst_exists('b0),
        .ld_exists('b0),
        .rdy_exists('b0),
        .ctype(2),
        .ival(0),
        .tval(9),
        .bitwidth(4),
        .isSigned('b0)
      ) myCounter (
        .clk(clkDiv10),
        .en(en),
        .grst(GlobalResetSel),
        .rst(rst),
        .up(1'b1),
        .ld(1'b0),
        .din(ldIn),
        .rdy(),
        .cnt(N_2)
      );
    end
  endgenerate
    Subsystem_New_Activation_Gold  myNew_Activation_Gold (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .GlobalReset(GlobalResetSel),
      .In1(N_4),
      .Out1(N_1)    );
    Subsystem_Activation_Preparation_LoopLatency10_0  myActivation_Preparation_LoopLatency10_0 (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .GlobalReset(GlobalResetSel),
      .In1(N_6),
      .In2(N_17),
      .Out1(N_4)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

//@
module MLP_Final_Golden (
  input clk,
  input clkDiv10,
  input clkDiv100,
  input GlobalReset,
  output [31:0] Port_Out9, // sfix32_En16
  output [31:0] Port_Out8, // sfix32_En16
  output [31:0] Port_Out7, // sfix32_En16
  output [31:0] Port_Out6, // sfix32_En16
  output [31:0] Port_Out5, // sfix32_En16
  output [31:0] Port_Out4, // sfix32_En16
  output [31:0] Port_Out3, // sfix32_En16
  output [31:0] Port_Out23, // sfix32_En16
  output [31:0] Port_Out22, // ufix32_En16
  output [31:0] Port_Out2, // sfix32_En16
  output [31:0] Port_Out18, // sfix32_En16
  output [31:0] Port_Out17, // sfix32_En16
  output [31:0] Port_Out16, // sfix32_En16
  output [31:0] Port_Out15, // sfix32_En16
  output [31:0] Port_Out14, // sfix32_En16
  output [31:0] Port_Out13, // sfix32_En16
  output [31:0] Port_Out12, // sfix32_En16
  output [31:0] Port_Out11, // sfix32_En16
  output [31:0] Port_Out10, // sfix32_En16
  output [31:0] Port_Out1, // sfix32_En16
  output [31:0] Port_Out, // sfix32_En16
  input [31:0] Port_In99, // sfix32_En16
  input [31:0] Port_In98, // sfix32_En16
  input [31:0] Port_In97, // sfix32_En16
  input [31:0] Port_In96, // sfix32_En16
  input [31:0] Port_In95, // sfix32_En16
  input [31:0] Port_In94, // sfix32_En16
  input [31:0] Port_In93, // sfix32_En16
  input [31:0] Port_In92, // sfix32_En16
  input [31:0] Port_In91, // sfix32_En16
  input [31:0] Port_In90, // sfix32_En16
  input [31:0] Port_In9, // sfix32_En16
  input [31:0] Port_In89, // sfix32_En16
  input [31:0] Port_In88, // sfix32_En16
  input [31:0] Port_In87, // sfix32_En16
  input [31:0] Port_In86, // sfix32_En16
  input [31:0] Port_In85, // sfix32_En16
  input [31:0] Port_In84, // sfix32_En16
  input [31:0] Port_In83, // sfix32_En16
  input [31:0] Port_In82, // sfix32_En16
  input [31:0] Port_In81, // sfix32_En16
  input [31:0] Port_In80, // sfix32_En16
  input [31:0] Port_In8, // sfix32_En16
  input [31:0] Port_In79, // sfix32_En16
  input [31:0] Port_In78, // sfix32_En16
  input [31:0] Port_In77, // sfix32_En16
  input [31:0] Port_In76, // sfix32_En16
  input [31:0] Port_In75, // sfix32_En16
  input [31:0] Port_In74, // sfix32_En16
  input [31:0] Port_In73, // sfix32_En16
  input [31:0] Port_In72, // sfix32_En16
  input [31:0] Port_In71, // sfix32_En16
  input [31:0] Port_In70, // sfix32_En16
  input [31:0] Port_In7, // sfix32_En16
  input [31:0] Port_In69, // sfix32_En16
  input [31:0] Port_In68, // sfix32_En16
  input [31:0] Port_In67, // sfix32_En16
  input [31:0] Port_In66, // sfix32_En16
  input [31:0] Port_In65, // sfix32_En16
  input [31:0] Port_In64, // sfix32_En16
  input [31:0] Port_In63, // sfix32_En16
  input [31:0] Port_In62, // sfix32_En16
  input [31:0] Port_In61, // sfix32_En16
  input [31:0] Port_In60, // sfix32_En16
  input [31:0] Port_In6, // sfix32_En16
  input [31:0] Port_In59, // sfix32_En16
  input [31:0] Port_In58, // sfix32_En16
  input [31:0] Port_In57, // sfix32_En16
  input [31:0] Port_In56, // sfix32_En16
  input [31:0] Port_In55, // sfix32_En16
  input [31:0] Port_In54, // sfix32_En16
  input [31:0] Port_In53, // sfix32_En16
  input [31:0] Port_In52, // sfix32_En16
  input [31:0] Port_In51, // sfix32_En16
  input [31:0] Port_In50, // sfix32_En16
  input [31:0] Port_In5, // sfix32_En16
  input [31:0] Port_In49, // sfix32_En16
  input [31:0] Port_In48, // sfix32_En16
  input [31:0] Port_In47, // sfix32_En16
  input [31:0] Port_In46, // sfix32_En16
  input [31:0] Port_In45, // sfix32_En16
  input [31:0] Port_In44, // sfix32_En16
  input [31:0] Port_In43, // sfix32_En16
  input [31:0] Port_In42, // sfix32_En16
  input [31:0] Port_In41, // sfix32_En16
  input [31:0] Port_In40, // sfix32_En16
  input [31:0] Port_In4, // sfix32_En16
  input [31:0] Port_In39, // sfix32_En16
  input [31:0] Port_In38, // sfix32_En16
  input [31:0] Port_In37, // sfix32_En16
  input [31:0] Port_In36, // sfix32_En16
  input [31:0] Port_In35, // sfix32_En16
  input [31:0] Port_In34, // sfix32_En16
  input [31:0] Port_In33, // sfix32_En16
  input [31:0] Port_In32, // sfix32_En16
  input [31:0] Port_In31, // sfix32_En16
  input [31:0] Port_In30, // sfix32_En16
  input [31:0] Port_In3, // sfix32_En16
  input [31:0] Port_In29, // sfix32_En16
  input [31:0] Port_In28, // sfix32_En16
  input [31:0] Port_In27, // sfix32_En16
  input [31:0] Port_In26, // sfix32_En16
  input [31:0] Port_In25, // sfix32_En16
  input [31:0] Port_In24, // sfix32_En16
  input [31:0] Port_In23, // sfix32_En16
  input [31:0] Port_In22, // sfix32_En16
  input [31:0] Port_In210, // ufix32_En16
  input [31:0] Port_In21, // sfix32_En16
  input [31:0] Port_In20, // sfix32_En16
  input [31:0] Port_In2, // sfix32_En16
  input [31:0] Port_In19, // sfix32_En16
  input [31:0] Port_In18, // sfix32_En16
  input [31:0] Port_In17, // sfix32_En16
  input [31:0] Port_In16, // sfix32_En16
  input [31:0] Port_In15, // sfix32_En16
  input [31:0] Port_In14, // sfix32_En16
  input [31:0] Port_In13, // sfix32_En16
  input [31:0] Port_In121, // sfix32_En16
  input [31:0] Port_In120, // sfix32_En16
  input [31:0] Port_In12, // sfix32_En16
  input [31:0] Port_In119, // sfix32_En16
  input [31:0] Port_In118, // sfix32_En16
  input [31:0] Port_In117, // sfix32_En16
  input [31:0] Port_In116, // sfix32_En16
  input [31:0] Port_In115, // sfix32_En16
  input [31:0] Port_In114, // sfix32_En16
  input [31:0] Port_In113, // sfix32_En16
  input [31:0] Port_In112, // sfix32_En16
  input [31:0] Port_In111, // sfix32_En16
  input [31:0] Port_In110, // sfix32_En16
  input [31:0] Port_In11, // sfix32_En16
  input [31:0] Port_In109, // sfix32_En16
  input [31:0] Port_In108, // sfix32_En16
  input [31:0] Port_In107, // sfix32_En16
  input [31:0] Port_In106, // sfix32_En16
  input [31:0] Port_In105, // sfix32_En16
  input [31:0] Port_In104, // sfix32_En16
  input [31:0] Port_In103, // sfix32_En16
  input [31:0] Port_In102, // sfix32_En16
  input [31:0] Port_In101, // sfix32_En16
  input [31:0] Port_In100, // sfix32_En16
  input [31:0] Port_In10, // sfix32_En16
  input [31:0] Port_In1, // sfix32_En16
  input [31:0] Port_In // sfix32_En16
//@
);
//@

wire [31:0] N_11;  
wire [31:0] N_13;  
wire [31:0] N_14;  
wire [31:0] N_15;  
wire [31:0] N_16;  
wire [31:0] N_17;  
wire [31:0] N_18;  
wire [31:0] N_19;  
wire [31:0] N_20;  
wire [31:0] N_21;  
wire [31:0] N_22;  
wire [31:0] N_23;  
wire [31:0] N_24;  
wire [31:0] N_25;  
wire [31:0] N_26;  
wire [31:0] N_27;  
wire [31:0] N_28;  
wire [31:0] N_29;  
wire [31:0] N_30;  
wire [31:0] N_31;  
wire [31:0] N_32;  
wire [31:0] N_33;  
wire [31:0] N_34;  
wire [31:0] N_35;  
wire [31:0] N_36;  
wire [31:0] N_37;  
wire [31:0] N_38;  
wire [31:0] N_39;  
wire [31:0] N_40;  
wire [31:0] N_41;  
wire [31:0] N_42;  
wire [31:0] N_43;  
wire [31:0] N_44;  
wire [31:0] N_45;  
wire [31:0] N_46;  
wire [31:0] N_47;  
wire [31:0] N_48;  
wire [31:0] N_49;  
wire [31:0] N_50;  
wire [31:0] N_51;  
wire [31:0] N_52;  
wire [31:0] N_53;  
wire [31:0] N_54;  
wire [31:0] N_55;  
wire [31:0] N_56;  
wire [31:0] N_57;  
wire [31:0] N_58;  
wire [31:0] N_59;  
wire [31:0] N_60;  
wire [31:0] N_61;  
wire [31:0] N_62;  
wire [31:0] N_63;  
wire [31:0] N_64;  
wire [31:0] N_65;  
wire [31:0] N_66;  
wire [31:0] N_67;  
wire [31:0] N_68;  
wire [31:0] N_69;  
wire [31:0] N_70;  
wire [31:0] N_71;  
wire [31:0] N_72;  
wire [31:0] N_73;  
wire [31:0] N_74;  
wire [31:0] N_75;  
wire [31:0] N_76;  
wire [31:0] N_77;  
wire [31:0] N_78;  
wire [31:0] N_79;  
wire [31:0] N_80;  
wire [31:0] N_81;  
wire [31:0] N_82;  
wire [31:0] N_83;  
wire [31:0] N_84;  
wire [31:0] N_85;  
wire [31:0] N_86;  
wire [31:0] N_87;  
wire [31:0] N_88;  
wire [31:0] N_89;  
wire [31:0] N_90;  
wire [31:0] N_91;  
wire [31:0] N_92;  
wire [31:0] N_93;  
wire [31:0] N_94;  
wire [31:0] N_95;  
wire [31:0] N_96;  
wire [31:0] N_97;  
wire [31:0] N_98;  
wire [31:0] N_99;  
wire [31:0] N_100;  
wire [31:0] N_101;  
wire [31:0] N_102;  
wire [31:0] N_103;  
wire [31:0] N_104;  
wire [31:0] N_105;  
wire [31:0] N_106;  
wire [31:0] N_107;  
wire [31:0] N_108;  
wire [31:0] N_109;  
wire [31:0] N_110;  
wire [31:0] N_111;  
wire [31:0] N_112;  
wire [31:0] N_113;  
wire [31:0] N_114;  
wire [31:0] N_115;  
wire [31:0] N_116;  
wire [31:0] N_117;  
wire [31:0] N_118;  
wire [31:0] N_119;  
wire [31:0] N_120;  
wire [31:0] N_121;  
wire [31:0] N_122;  
wire [31:0] N_123;  
wire [31:0] N_124;  
wire [31:0] N_125;  
wire [31:0] N_126;  
wire [31:0] N_127;  
wire [31:0] N_128;  
wire [31:0] N_140;  
wire [31:0] N_142;  
wire [31:0] N_152;  
wire [31:0] N_153;  
wire [31:0] N_154;  
wire [31:0] N_155;  
wire [31:0] N_156;  
wire [31:0] N_157;  
wire [31:0] N_158;  
wire [31:0] N_160;  
wire [31:0] N_161;  
wire [31:0] N_163;  
wire [31:0] N_164;  
wire [31:0] N_166;  
wire [31:0] N_167;  
wire [31:0] N_169;  
wire [31:0] N_170;  
wire [31:0] N_172;  
wire [31:0] N_173;  
wire [31:0] N_175;  
wire [31:0] N_176;  
wire [31:0] N_178;  
wire [31:0] N_179;  
wire [31:0] N_181;  
wire [31:0] N_182;  
wire [31:0] N_184;  
wire [31:0] N_195;  
wire [31:0] N_196;  
wire [0:0] GlobalEnableSignal100;  
wire [0:0] GlobalEnableSignal10;  
wire [0:0] GlobalEnableSignal1;  
wire [31:0] N_1;  
wire [31:0] N_2;  
wire [31:0] N_3;  
wire [31:0] N_4;  
wire [31:0] N_5;  
wire [31:0] N_6;  
wire [31:0] N_7;  
wire [31:0] N_8;  
wire [31:0] N_9;  
wire [31:0] N_10;  
wire [31:0] N_143;  
wire [31:0] N_144;  
wire [31:0] N_145;  
wire [31:0] N_151;  
wire [31:0] N_150;  
wire [31:0] N_149;  
wire [31:0] N_148;  
wire [31:0] N_147;  
wire [31:0] N_146;  
wire [31:0] N_129;  
wire [31:0] N_194;  
wire [31:0] N_193;  
wire [31:0] N_192;  
wire [31:0] N_191;  
wire [31:0] N_190;  
wire [31:0] N_189;  
wire [31:0] N_188;  
wire [31:0] N_187;  
wire [31:0] N_186;  
wire [31:0] N_185;  
wire GlobalResetSel;
  wire GlobalEnable1;
  wire GlobalEnable10;
  wire GlobalEnable100;
  assign GlobalEnable1 = 1;
  assign GlobalEnable10 = 1;
  assign GlobalEnable100 = 1;
    Activation_Preparation_LoopLatency10_0  myActivation_Preparation_LoopLatency10_0 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_196),
      .In2(N_195),
      .Out1(N_185)    );
    Activation_Preparation_LoopLatency10_0  myActivation_Preparation_LoopLatency10_01 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_152),
      .In2(N_195),
      .Out1(N_186)    );
    Activation_Preparation_LoopLatency10_0  myActivation_Preparation_LoopLatency10_02 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_153),
      .In2(N_195),
      .Out1(N_187)    );
    Activation_Preparation_LoopLatency10_0  myActivation_Preparation_LoopLatency10_03 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_154),
      .In2(N_195),
      .Out1(N_188)    );
    Activation_Preparation_LoopLatency10_0  myActivation_Preparation_LoopLatency10_04 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_155),
      .In2(N_195),
      .Out1(N_189)    );
    Activation_Preparation_LoopLatency10_0  myActivation_Preparation_LoopLatency10_05 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_126),
      .In2(N_195),
      .Out1(N_190)    );
    Activation_Preparation_LoopLatency10_0  myActivation_Preparation_LoopLatency10_06 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_156),
      .In2(N_195),
      .Out1(N_191)    );
    Activation_Preparation_LoopLatency10_0  myActivation_Preparation_LoopLatency10_07 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_157),
      .In2(N_195),
      .Out1(N_192)    );
    Activation_Preparation_LoopLatency10_0  myActivation_Preparation_LoopLatency10_08 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_127),
      .In2(N_195),
      .Out1(N_193)    );
    Activation_Preparation_LoopLatency10_0  myActivation_Preparation_LoopLatency10_09 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_128),
      .In2(N_195),
      .Out1(N_194)    );
    New_Activation_Gold  myNew_Activation_Gold (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_185),
      .Out1(N_129)    );
    New_Activation_Gold  myNew_Activation_Gold1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_186),
      .Out1(N_146)    );
    New_Activation_Gold  myNew_Activation_Gold2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_187),
      .Out1(N_147)    );
    New_Activation_Gold  myNew_Activation_Gold3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_188),
      .Out1(N_148)    );
    New_Activation_Gold  myNew_Activation_Gold4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_189),
      .Out1(N_149)    );
    New_Activation_Gold  myNew_Activation_Gold5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_190),
      .Out1(N_150)    );
    New_Activation_Gold  myNew_Activation_Gold6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_191),
      .Out1(N_151)    );
    New_Activation_Gold  myNew_Activation_Gold7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_192),
      .Out1(N_145)    );
    New_Activation_Gold  myNew_Activation_Gold8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_193),
      .Out1(N_144)    );
    New_Activation_Gold  myNew_Activation_Gold9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_194),
      .Out1(N_143)    );
    Subsystem9  mySubsystem9 (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .clkDiv100(clkDiv100),
      .GlobalEnable100(GlobalEnable100),
      .GlobalReset(GlobalResetSel),
      .In1(N_35),
      .In2(N_116),
      .In3(N_117),
      .In4(N_118),
      .In5(N_119),
      .In6(N_120),
      .In7(N_121),
      .In8(N_122),
      .In9(N_123),
      .In10(N_124),
      .In11(N_125),
      .Out1(N_10)    );
    Subsystem8  mySubsystem8 (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .clkDiv100(clkDiv100),
      .GlobalEnable100(GlobalEnable100),
      .GlobalReset(GlobalResetSel),
      .In1(N_35),
      .In2(N_106),
      .In3(N_107),
      .In4(N_108),
      .In5(N_109),
      .In6(N_110),
      .In7(N_111),
      .In8(N_112),
      .In9(N_113),
      .In10(N_114),
      .In11(N_115),
      .Out1(N_9)    );
    Subsystem7  mySubsystem7 (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .clkDiv100(clkDiv100),
      .GlobalEnable100(GlobalEnable100),
      .GlobalReset(GlobalResetSel),
      .In1(N_35),
      .In2(N_96),
      .In3(N_97),
      .In4(N_98),
      .In5(N_99),
      .In6(N_100),
      .In7(N_101),
      .In8(N_102),
      .In9(N_103),
      .In10(N_104),
      .In11(N_105),
      .Out1(N_8)    );
    Subsystem6  mySubsystem6 (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .clkDiv100(clkDiv100),
      .GlobalEnable100(GlobalEnable100),
      .GlobalReset(GlobalResetSel),
      .In1(N_35),
      .In2(N_86),
      .In3(N_87),
      .In4(N_88),
      .In5(N_89),
      .In6(N_90),
      .In7(N_91),
      .In8(N_92),
      .In9(N_93),
      .In10(N_94),
      .In11(N_95),
      .Out1(N_7)    );
    Subsystem5  mySubsystem5 (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .clkDiv100(clkDiv100),
      .GlobalEnable100(GlobalEnable100),
      .GlobalReset(GlobalResetSel),
      .In1(N_35),
      .In2(N_76),
      .In3(N_77),
      .In4(N_78),
      .In5(N_79),
      .In6(N_80),
      .In7(N_81),
      .In8(N_82),
      .In9(N_83),
      .In10(N_84),
      .In11(N_85),
      .Out1(N_6)    );
    Subsystem4  mySubsystem4 (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .clkDiv100(clkDiv100),
      .GlobalEnable100(GlobalEnable100),
      .GlobalReset(GlobalResetSel),
      .In1(N_35),
      .In2(N_66),
      .In3(N_67),
      .In4(N_68),
      .In5(N_69),
      .In6(N_70),
      .In7(N_71),
      .In8(N_72),
      .In9(N_73),
      .In10(N_74),
      .In11(N_75),
      .Out1(N_5)    );
    Subsystem3  mySubsystem3 (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .clkDiv100(clkDiv100),
      .GlobalEnable100(GlobalEnable100),
      .GlobalReset(GlobalResetSel),
      .In1(N_35),
      .In2(N_56),
      .In3(N_57),
      .In4(N_58),
      .In5(N_59),
      .In6(N_60),
      .In7(N_61),
      .In8(N_62),
      .In9(N_63),
      .In10(N_64),
      .In11(N_65),
      .Out1(N_4)    );
    Subsystem2  mySubsystem2 (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .clkDiv100(clkDiv100),
      .GlobalEnable100(GlobalEnable100),
      .GlobalReset(GlobalResetSel),
      .In1(N_35),
      .In2(N_46),
      .In3(N_47),
      .In4(N_48),
      .In5(N_49),
      .In6(N_50),
      .In7(N_51),
      .In8(N_52),
      .In9(N_53),
      .In10(N_54),
      .In11(N_55),
      .Out1(N_3)    );
    Subsystem1  mySubsystem1 (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .clkDiv100(clkDiv100),
      .GlobalEnable100(GlobalEnable100),
      .GlobalReset(GlobalResetSel),
      .In1(N_35),
      .In2(N_36),
      .In3(N_37),
      .In4(N_38),
      .In5(N_39),
      .In6(N_40),
      .In7(N_41),
      .In8(N_42),
      .In9(N_43),
      .In10(N_44),
      .In11(N_45),
      .Out1(N_2)    );
    Subsystem  mySubsystem (
      .clkDiv10(clkDiv10),
      .GlobalEnable10(GlobalEnable10),
      .clkDiv100(clkDiv100),
      .GlobalEnable100(GlobalEnable100),
      .GlobalReset(GlobalResetSel),
      .In1(N_35),
      .In2(N_25),
      .In3(N_26),
      .In4(N_27),
      .In5(N_28),
      .In6(N_29),
      .In7(N_30),
      .In8(N_31),
      .In9(N_32),
      .In10(N_33),
      .In11(N_34),
      .Out1(N_1)    );
  assign GlobalEnableSignal1 = GlobalEnable1;
  assign GlobalEnableSignal10 = GlobalEnable10;
  assign GlobalEnableSignal100 = GlobalEnable100;
  generate
  begin: Port_Out9_block
    reg [31:0] med;
    wire [31:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk )//or posedge GlobalResetSel)
  begin: Port_Out9_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_143;
  assign Port_Out9 = med;
  end // Port_Out9_Block
  endgenerate
  generate
  begin: Port_Out8_block
    reg [31:0] med;
    wire [31:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk)// or posedge GlobalResetSel)
  begin: Port_Out8_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_144;
  assign Port_Out8 = med;
  end // Port_Out8_Block
  endgenerate
  generate
  begin: Port_Out7_block
    reg [31:0] med;
    wire [31:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk )//or posedge GlobalResetSel)
  begin: Port_Out7_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_145;
  assign Port_Out7 = med;
  end // Port_Out7_Block
  endgenerate
  generate
  begin: Port_Out6_block
    reg [31:0] med;
    wire [31:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk)// or posedge GlobalResetSel)
  begin: Port_Out6_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_151;
  assign Port_Out6 = med;
  end // Port_Out6_Block
  endgenerate
  generate
  begin: Port_Out5_block
    reg [31:0] med;
    wire [31:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk )//or posedge GlobalResetSel)
  begin: Port_Out5_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_150;
  assign Port_Out5 = med;
  end // Port_Out5_Block
  endgenerate
  generate
  begin: Port_Out4_block
    reg [31:0] med;
    wire [31:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk )//or posedge GlobalResetSel)
  begin: Port_Out4_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_149;
  assign Port_Out4 = med;
  end // Port_Out4_Block
  endgenerate
  generate
  begin: Port_Out3_block
    reg [31:0] med;
    wire [31:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk )//or posedge GlobalResetSel)
  begin: Port_Out3_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_148;
  assign Port_Out3 = med;
  end // Port_Out3_Block
  endgenerate
  generate
  begin: Port_Out23_block
    reg [31:0] med;
    wire [31:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clkDiv10 )//or posedge GlobalResetSel)
  begin: Port_Out23_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_140;
  assign Port_Out23 = med;
  end // Port_Out23_Block
  endgenerate
  generate
  begin: Port_Out22_block
    reg [31:0] med;
    wire [31:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clkDiv10)// or posedge GlobalResetSel)
  begin: Port_Out22_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_24;
  assign Port_Out22 = med;
  end // Port_Out22_Block
  endgenerate
  generate
  begin: Port_Out2_block
    reg [31:0] med;
    wire [31:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk )//or posedge GlobalResetSel)
  begin: Port_Out2_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_147;
  assign Port_Out2 = med;
  end // Port_Out2_Block
  endgenerate
  generate
  begin: Port_Out18_block
    reg [31:0] med;
    wire [31:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clkDiv10 )//or posedge GlobalResetSel)
  begin: Port_Out18_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_182;
  assign Port_Out18 = med;
  end // Port_Out18_Block
  endgenerate
  generate
  begin: Port_Out17_block
    reg [31:0] med;
    wire [31:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clkDiv10 )//or posedge GlobalResetSel)
  begin: Port_Out17_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_179;
  assign Port_Out17 = med;
  end // Port_Out17_Block
  endgenerate
  generate
  begin: Port_Out16_block
    reg [31:0] med;
    wire [31:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clkDiv10 )//or posedge GlobalResetSel)
  begin: Port_Out16_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_176;
  assign Port_Out16 = med;
  end // Port_Out16_Block
  endgenerate
  generate
  begin: Port_Out15_block
    reg [31:0] med;
    wire [31:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clkDiv10 )//or posedge GlobalResetSel)
  begin: Port_Out15_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_173;
  assign Port_Out15 = med;
  end // Port_Out15_Block
  endgenerate
  generate
  begin: Port_Out14_block
    reg [31:0] med;
    wire [31:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clkDiv10)// or posedge GlobalResetSel)
  begin: Port_Out14_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_170;
  assign Port_Out14 = med;
  end // Port_Out14_Block
  endgenerate
  generate
  begin: Port_Out13_block
    reg [31:0] med;
    wire [31:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clkDiv10)// or posedge GlobalResetSel)
  begin: Port_Out13_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_167;
  assign Port_Out13 = med;
  end // Port_Out13_Block
  endgenerate
  generate
  begin: Port_Out12_block
    reg [31:0] med;
    wire [31:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clkDiv10 )//or posedge GlobalResetSel)
  begin: Port_Out12_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_164;
  assign Port_Out12 = med;
  end // Port_Out12_Block
  endgenerate
  generate
  begin: Port_Out11_block
    reg [31:0] med;
    wire [31:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clkDiv10)// or posedge GlobalResetSel)
  begin: Port_Out11_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_161;
  assign Port_Out11 = med;
  end // Port_Out11_Block
  endgenerate
  generate
  begin: Port_Out10_block
    reg [31:0] med;
    wire [31:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clkDiv10 )//or posedge GlobalResetSel)
  begin: Port_Out10_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_158;
  assign Port_Out10 = med;
  end // Port_Out10_Block
  endgenerate
  generate
  begin: Port_Out1_block
    reg [31:0] med;
    wire [31:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk)// or posedge GlobalResetSel)
  begin: Port_Out1_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_146;
  assign Port_Out1 = med;
  end // Port_Out1_Block
  endgenerate
  generate
  begin: Port_Out_block
    reg [31:0] med;
    wire [31:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk)// or posedge GlobalResetSel)
  begin: Port_Out_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_129;
  assign Port_Out = med;
  end // Port_Out_Block
  endgenerate
  generate
  begin: Port_In99_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100 )//or posedge GlobalResetSel)
  begin: Port_In99_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In99;
  end // inProc
  assign out_tmp = med;
  assign N_124 = out_tmp;
  end // Port_In99_Block
  endgenerate
  generate
  begin: Port_In98_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100 )//or posedge GlobalResetSel)
  begin: Port_In98_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In98;
  end // inProc
  assign out_tmp = med;
  assign N_123 = out_tmp;
  end // Port_In98_Block
  endgenerate
  generate
  begin: Port_In97_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100 )//or posedge GlobalResetSel)
  begin: Port_In97_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In97;
  end // inProc
  assign out_tmp = med;
  assign N_122 = out_tmp;
  end // Port_In97_Block
  endgenerate
  generate
  begin: Port_In96_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100 )//or posedge GlobalResetSel)
  begin: Port_In96_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In96;
  end // inProc
  assign out_tmp = med;
  assign N_121 = out_tmp;
  end // Port_In96_Block
  endgenerate
  generate
  begin: Port_In95_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100 )//or posedge GlobalResetSel)
  begin: Port_In95_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In95;
  end // inProc
  assign out_tmp = med;
  assign N_120 = out_tmp;
  end // Port_In95_Block
  endgenerate
  generate
  begin: Port_In94_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100 )//or posedge GlobalResetSel)
  begin: Port_In94_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In94;
  end // inProc
  assign out_tmp = med;
  assign N_119 = out_tmp;
  end // Port_In94_Block
  endgenerate
  generate
  begin: Port_In93_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100 )//or posedge GlobalResetSel)
  begin: Port_In93_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In93;
  end // inProc
  assign out_tmp = med;
  assign N_118 = out_tmp;
  end // Port_In93_Block
  endgenerate
  generate
  begin: Port_In92_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100 )//or posedge GlobalResetSel)
  begin: Port_In92_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In92;
  end // inProc
  assign out_tmp = med;
  assign N_117 = out_tmp;
  end // Port_In92_Block
  endgenerate
  generate
  begin: Port_In91_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100 )//or posedge GlobalResetSel)
  begin: Port_In91_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In91;
  end // inProc
  assign out_tmp = med;
  assign N_116 = out_tmp;
  end // Port_In91_Block
  endgenerate
  generate
  begin: Port_In90_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100 )//or posedge GlobalResetSel)
  begin: Port_In90_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In90;
  end // inProc
  assign out_tmp = med;
  assign N_115 = out_tmp;
  end // Port_In90_Block
  endgenerate
  generate
  begin: Port_In9_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100 )//or posedge GlobalResetSel)
  begin: Port_In9_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In9;
  end // inProc
  assign out_tmp = med;
  assign N_33 = out_tmp;
  end // Port_In9_Block
  endgenerate
  generate
  begin: Port_In89_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100)// or posedge GlobalResetSel)
  begin: Port_In89_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In89;
  end // inProc
  assign out_tmp = med;
  assign N_114 = out_tmp;
  end // Port_In89_Block
  endgenerate
  generate
  begin: Port_In88_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100 )//or posedge GlobalResetSel)
  begin: Port_In88_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In88;
  end // inProc
  assign out_tmp = med;
  assign N_113 = out_tmp;
  end // Port_In88_Block
  endgenerate
  generate
  begin: Port_In87_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100 )//or posedge GlobalResetSel)
  begin: Port_In87_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In87;
  end // inProc
  assign out_tmp = med;
  assign N_112 = out_tmp;
  end // Port_In87_Block
  endgenerate
  generate
  begin: Port_In86_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100 )//or posedge GlobalResetSel)
  begin: Port_In86_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In86;
  end // inProc
  assign out_tmp = med;
  assign N_111 = out_tmp;
  end // Port_In86_Block
  endgenerate
  generate
  begin: Port_In85_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100 )//or posedge GlobalResetSel)
  begin: Port_In85_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In85;
  end // inProc
  assign out_tmp = med;
  assign N_110 = out_tmp;
  end // Port_In85_Block
  endgenerate
  generate
  begin: Port_In84_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100 )//or posedge GlobalResetSel)
  begin: Port_In84_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In84;
  end // inProc
  assign out_tmp = med;
  assign N_109 = out_tmp;
  end // Port_In84_Block
  endgenerate
  generate
  begin: Port_In83_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100)// or posedge GlobalResetSel)
  begin: Port_In83_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In83;
  end // inProc
  assign out_tmp = med;
  assign N_108 = out_tmp;
  end // Port_In83_Block
  endgenerate
  generate
  begin: Port_In82_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100 )//or posedge GlobalResetSel)
  begin: Port_In82_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In82;
  end // inProc
  assign out_tmp = med;
  assign N_107 = out_tmp;
  end // Port_In82_Block
  endgenerate
  generate
  begin: Port_In81_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100 )//or posedge GlobalResetSel)
  begin: Port_In81_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In81;
  end // inProc
  assign out_tmp = med;
  assign N_106 = out_tmp;
  end // Port_In81_Block
  endgenerate
  generate
  begin: Port_In80_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100)// or posedge GlobalResetSel)
  begin: Port_In80_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In80;
  end // inProc
  assign out_tmp = med;
  assign N_105 = out_tmp;
  end // Port_In80_Block
  endgenerate
  generate
  begin: Port_In8_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100 )//or posedge GlobalResetSel)
  begin: Port_In8_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In8;
  end // inProc
  assign out_tmp = med;
  assign N_32 = out_tmp;
  end // Port_In8_Block
  endgenerate
  generate
  begin: Port_In79_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100)// or posedge GlobalResetSel)
  begin: Port_In79_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In79;
  end // inProc
  assign out_tmp = med;
  assign N_104 = out_tmp;
  end // Port_In79_Block
  endgenerate
  generate
  begin: Port_In78_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100 )//or posedge GlobalResetSel)
  begin: Port_In78_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In78;
  end // inProc
  assign out_tmp = med;
  assign N_103 = out_tmp;
  end // Port_In78_Block
  endgenerate
  generate
  begin: Port_In77_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100)// or posedge GlobalResetSel)
  begin: Port_In77_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In77;
  end // inProc
  assign out_tmp = med;
  assign N_102 = out_tmp;
  end // Port_In77_Block
  endgenerate
  generate
  begin: Port_In76_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100 )//or posedge GlobalResetSel)
  begin: Port_In76_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In76;
  end // inProc
  assign out_tmp = med;
  assign N_101 = out_tmp;
  end // Port_In76_Block
  endgenerate
  generate
  begin: Port_In75_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In75_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In75;
  end // inProc
  assign out_tmp = med;
  assign N_100 = out_tmp;
  end // Port_In75_Block
  endgenerate
  generate
  begin: Port_In74_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In74_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In74;
  end // inProc
  assign out_tmp = med;
  assign N_99 = out_tmp;
  end // Port_In74_Block
  endgenerate
  generate
  begin: Port_In73_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In73_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In73;
  end // inProc
  assign out_tmp = med;
  assign N_98 = out_tmp;
  end // Port_In73_Block
  endgenerate
  generate
  begin: Port_In72_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In72_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In72;
  end // inProc
  assign out_tmp = med;
  assign N_97 = out_tmp;
  end // Port_In72_Block
  endgenerate
  generate
  begin: Port_In71_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100 ) //or posedge GlobalResetSel)
  begin: Port_In71_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In71;
  end // inProc
  assign out_tmp = med;
  assign N_96 = out_tmp;
  end // Port_In71_Block
  endgenerate
  generate
  begin: Port_In70_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In70_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In70;
  end // inProc
  assign out_tmp = med;
  assign N_95 = out_tmp;
  end // Port_In70_Block
  endgenerate
  generate
  begin: Port_In7_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In7_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In7;
  end // inProc
  assign out_tmp = med;
  assign N_31 = out_tmp;
  end // Port_In7_Block
  endgenerate
  generate
  begin: Port_In69_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In69_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In69;
  end // inProc
  assign out_tmp = med;
  assign N_94 = out_tmp;
  end // Port_In69_Block
  endgenerate
  generate
  begin: Port_In68_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In68_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In68;
  end // inProc
  assign out_tmp = med;
  assign N_93 = out_tmp;
  end // Port_In68_Block
  endgenerate
  generate
  begin: Port_In67_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In67_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In67;
  end // inProc
  assign out_tmp = med;
  assign N_92 = out_tmp;
  end // Port_In67_Block
  endgenerate
  generate
  begin: Port_In66_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In66_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In66;
  end // inProc
  assign out_tmp = med;
  assign N_91 = out_tmp;
  end // Port_In66_Block
  endgenerate
  generate
  begin: Port_In65_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In65_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In65;
  end // inProc
  assign out_tmp = med;
  assign N_90 = out_tmp;
  end // Port_In65_Block
  endgenerate
  generate
  begin: Port_In64_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In64_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In64;
  end // inProc
  assign out_tmp = med;
  assign N_89 = out_tmp;
  end // Port_In64_Block
  endgenerate
  generate
  begin: Port_In63_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In63_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In63;
  end // inProc
  assign out_tmp = med;
  assign N_88 = out_tmp;
  end // Port_In63_Block
  endgenerate
  generate
  begin: Port_In62_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In62_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In62;
  end // inProc
  assign out_tmp = med;
  assign N_87 = out_tmp;
  end // Port_In62_Block
  endgenerate
  generate
  begin: Port_In61_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In61_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In61;
  end // inProc
  assign out_tmp = med;
  assign N_86 = out_tmp;
  end // Port_In61_Block
  endgenerate
  generate
  begin: Port_In60_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In60_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In60;
  end // inProc
  assign out_tmp = med;
  assign N_85 = out_tmp;
  end // Port_In60_Block
  endgenerate
  generate
  begin: Port_In6_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In6_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In6;
  end // inProc
  assign out_tmp = med;
  assign N_30 = out_tmp;
  end // Port_In6_Block
  endgenerate
  generate
  begin: Port_In59_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In59_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In59;
  end // inProc
  assign out_tmp = med;
  assign N_84 = out_tmp;
  end // Port_In59_Block
  endgenerate
  generate
  begin: Port_In58_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In58_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In58;
  end // inProc
  assign out_tmp = med;
  assign N_83 = out_tmp;
  end // Port_In58_Block
  endgenerate
  generate
  begin: Port_In57_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In57_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In57;
  end // inProc
  assign out_tmp = med;
  assign N_82 = out_tmp;
  end // Port_In57_Block
  endgenerate
  generate
  begin: Port_In56_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In56_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In56;
  end // inProc
  assign out_tmp = med;
  assign N_81 = out_tmp;
  end // Port_In56_Block
  endgenerate
  generate
  begin: Port_In55_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In55_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In55;
  end // inProc
  assign out_tmp = med;
  assign N_80 = out_tmp;
  end // Port_In55_Block
  endgenerate
  generate
  begin: Port_In54_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In54_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In54;
  end // inProc
  assign out_tmp = med;
  assign N_79 = out_tmp;
  end // Port_In54_Block
  endgenerate
  generate
  begin: Port_In53_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In53_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In53;
  end // inProc
  assign out_tmp = med;
  assign N_78 = out_tmp;
  end // Port_In53_Block
  endgenerate
  generate
  begin: Port_In52_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In52_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In52;
  end // inProc
  assign out_tmp = med;
  assign N_77 = out_tmp;
  end // Port_In52_Block
  endgenerate
  generate
  begin: Port_In51_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In51_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In51;
  end // inProc
  assign out_tmp = med;
  assign N_76 = out_tmp;
  end // Port_In51_Block
  endgenerate
  generate
  begin: Port_In50_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In50_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In50;
  end // inProc
  assign out_tmp = med;
  assign N_75 = out_tmp;
  end // Port_In50_Block
  endgenerate
  generate
  begin: Port_In5_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In5_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In5;
  end // inProc
  assign out_tmp = med;
  assign N_29 = out_tmp;
  end // Port_In5_Block
  endgenerate
  generate
  begin: Port_In49_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In49_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In49;
  end // inProc
  assign out_tmp = med;
  assign N_74 = out_tmp;
  end // Port_In49_Block
  endgenerate
  generate
  begin: Port_In48_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In48_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In48;
  end // inProc
  assign out_tmp = med;
  assign N_73 = out_tmp;
  end // Port_In48_Block
  endgenerate
  generate
  begin: Port_In47_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In47_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In47;
  end // inProc
  assign out_tmp = med;
  assign N_72 = out_tmp;
  end // Port_In47_Block
  endgenerate
  generate
  begin: Port_In46_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In46_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In46;
  end // inProc
  assign out_tmp = med;
  assign N_71 = out_tmp;
  end // Port_In46_Block
  endgenerate
  generate
  begin: Port_In45_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In45_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In45;
  end // inProc
  assign out_tmp = med;
  assign N_70 = out_tmp;
  end // Port_In45_Block
  endgenerate
  generate
  begin: Port_In44_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In44_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In44;
  end // inProc
  assign out_tmp = med;
  assign N_69 = out_tmp;
  end // Port_In44_Block
  endgenerate
  generate
  begin: Port_In43_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In43_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In43;
  end // inProc
  assign out_tmp = med;
  assign N_68 = out_tmp;
  end // Port_In43_Block
  endgenerate
  generate
  begin: Port_In42_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In42_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In42;
  end // inProc
  assign out_tmp = med;
  assign N_67 = out_tmp;
  end // Port_In42_Block
  endgenerate
  generate
  begin: Port_In41_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In41_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In41;
  end // inProc
  assign out_tmp = med;
  assign N_66 = out_tmp;
  end // Port_In41_Block
  endgenerate
  generate
  begin: Port_In40_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In40_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In40;
  end // inProc
  assign out_tmp = med;
  assign N_65 = out_tmp;
  end // Port_In40_Block
  endgenerate
  generate
  begin: Port_In4_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In4_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In4;
  end // inProc
  assign out_tmp = med;
  assign N_28 = out_tmp;
  end // Port_In4_Block
  endgenerate
  generate
  begin: Port_In39_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In39_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In39;
  end // inProc
  assign out_tmp = med;
  assign N_64 = out_tmp;
  end // Port_In39_Block
  endgenerate
  generate
  begin: Port_In38_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In38_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In38;
  end // inProc
  assign out_tmp = med;
  assign N_63 = out_tmp;
  end // Port_In38_Block
  endgenerate
  generate
  begin: Port_In37_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In37_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In37;
  end // inProc
  assign out_tmp = med;
  assign N_62 = out_tmp;
  end // Port_In37_Block
  endgenerate
  generate
  begin: Port_In36_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In36_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In36;
  end // inProc
  assign out_tmp = med;
  assign N_61 = out_tmp;
  end // Port_In36_Block
  endgenerate
  generate
  begin: Port_In35_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In35_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In35;
  end // inProc
  assign out_tmp = med;
  assign N_60 = out_tmp;
  end // Port_In35_Block
  endgenerate
  generate
  begin: Port_In34_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In34_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In34;
  end // inProc
  assign out_tmp = med;
  assign N_59 = out_tmp;
  end // Port_In34_Block
  endgenerate
  generate
  begin: Port_In33_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In33_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In33;
  end // inProc
  assign out_tmp = med;
  assign N_58 = out_tmp;
  end // Port_In33_Block
  endgenerate
  generate
  begin: Port_In32_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In32_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In32;
  end // inProc
  assign out_tmp = med;
  assign N_57 = out_tmp;
  end // Port_In32_Block
  endgenerate
  generate
  begin: Port_In31_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In31_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In31;
  end // inProc
  assign out_tmp = med;
  assign N_56 = out_tmp;
  end // Port_In31_Block
  endgenerate
  generate
  begin: Port_In30_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In30_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In30;
  end // inProc
  assign out_tmp = med;
  assign N_55 = out_tmp;
  end // Port_In30_Block
  endgenerate
  generate
  begin: Port_In3_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In3_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In3;
  end // inProc
  assign out_tmp = med;
  assign N_27 = out_tmp;
  end // Port_In3_Block
  endgenerate
  generate
  begin: Port_In29_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In29_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In29;
  end // inProc
  assign out_tmp = med;
  assign N_54 = out_tmp;
  end // Port_In29_Block
  endgenerate
  generate
  begin: Port_In28_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In28_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In28;
  end // inProc
  assign out_tmp = med;
  assign N_53 = out_tmp;
  end // Port_In28_Block
  endgenerate
  generate
  begin: Port_In27_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In27_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In27;
  end // inProc
  assign out_tmp = med;
  assign N_52 = out_tmp;
  end // Port_In27_Block
  endgenerate
  generate
  begin: Port_In26_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In26_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In26;
  end // inProc
  assign out_tmp = med;
  assign N_51 = out_tmp;
  end // Port_In26_Block
  endgenerate
  generate
  begin: Port_In25_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In25_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In25;
  end // inProc
  assign out_tmp = med;
  assign N_50 = out_tmp;
  end // Port_In25_Block
  endgenerate
  generate
  begin: Port_In24_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In24_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In24;
  end // inProc
  assign out_tmp = med;
  assign N_49 = out_tmp;
  end // Port_In24_Block
  endgenerate
  generate
  begin: Port_In23_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In23_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In23;
  end // inProc
  assign out_tmp = med;
  assign N_48 = out_tmp;
  end // Port_In23_Block
  endgenerate
  generate
  begin: Port_In22_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In22_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In22;
  end // inProc
  assign out_tmp = med;
  assign N_47 = out_tmp;
  end // Port_In22_Block
  endgenerate
  generate
  begin: Port_In210_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv10) // or posedge GlobalResetSel)
  begin: Port_In210_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= Port_In210;
  end // inProc
  assign out_tmp = med;
  assign N_13 = out_tmp;
  end // Port_In210_Block
  endgenerate
  generate
  begin: Port_In21_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In21_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In21;
  end // inProc
  assign out_tmp = med;
  assign N_46 = out_tmp;
  end // Port_In21_Block
  endgenerate
  generate
  begin: Port_In20_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In20_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In20;
  end // inProc
  assign out_tmp = med;
  assign N_45 = out_tmp;
  end // Port_In20_Block
  endgenerate
  generate
  begin: Port_In2_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In2_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In2;
  end // inProc
  assign out_tmp = med;
  assign N_26 = out_tmp;
  end // Port_In2_Block
  endgenerate
  generate
  begin: Port_In19_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In19_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In19;
  end // inProc
  assign out_tmp = med;
  assign N_44 = out_tmp;
  end // Port_In19_Block
  endgenerate
  generate
  begin: Port_In18_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In18_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In18;
  end // inProc
  assign out_tmp = med;
  assign N_43 = out_tmp;
  end // Port_In18_Block
  endgenerate
  generate
  begin: Port_In17_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In17_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In17;
  end // inProc
  assign out_tmp = med;
  assign N_42 = out_tmp;
  end // Port_In17_Block
  endgenerate
  generate
  begin: Port_In16_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In16_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In16;
  end // inProc
  assign out_tmp = med;
  assign N_41 = out_tmp;
  end // Port_In16_Block
  endgenerate
  generate
  begin: Port_In15_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In15_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In15;
  end // inProc
  assign out_tmp = med;
  assign N_40 = out_tmp;
  end // Port_In15_Block
  endgenerate
  generate
  begin: Port_In14_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In14_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In14;
  end // inProc
  assign out_tmp = med;
  assign N_39 = out_tmp;
  end // Port_In14_Block
  endgenerate
  generate
  begin: Port_In13_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In13_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In13;
  end // inProc
  assign out_tmp = med;
  assign N_38 = out_tmp;
  end // Port_In13_Block
  endgenerate
  generate
  begin: Port_In121_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clk) // or posedge GlobalResetSel)
  begin: Port_In121_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In121;
  end // inProc
  assign out_tmp = med;
  assign N_155 = out_tmp;
  end // Port_In121_Block
  endgenerate
  generate
  begin: Port_In120_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv10) // or posedge GlobalResetSel)
  begin: Port_In120_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= Port_In120;
  end // inProc
  assign out_tmp = med;
  assign N_169 = out_tmp;
  end // Port_In120_Block
  endgenerate
  generate
  begin: Port_In12_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In12_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In12;
  end // inProc
  assign out_tmp = med;
  assign N_37 = out_tmp;
  end // Port_In12_Block
  endgenerate
  generate
  begin: Port_In119_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clk) // or posedge GlobalResetSel)
  begin: Port_In119_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In119;
  end // inProc
  assign out_tmp = med;
  assign N_154 = out_tmp;
  end // Port_In119_Block
  endgenerate
  generate
  begin: Port_In118_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv10) // or posedge GlobalResetSel)
  begin: Port_In118_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= Port_In118;
  end // inProc
  assign out_tmp = med;
  assign N_166 = out_tmp;
  end // Port_In118_Block
  endgenerate
  generate
  begin: Port_In117_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clk) // or posedge GlobalResetSel)
  begin: Port_In117_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In117;
  end // inProc
  assign out_tmp = med;
  assign N_153 = out_tmp;
  end // Port_In117_Block
  endgenerate
  generate
  begin: Port_In116_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv10) // or posedge GlobalResetSel)
  begin: Port_In116_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= Port_In116;
  end // inProc
  assign out_tmp = med;
  assign N_163 = out_tmp;
  end // Port_In116_Block
  endgenerate
  generate
  begin: Port_In115_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clk) // or posedge GlobalResetSel)
  begin: Port_In115_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In115;
  end // inProc
  assign out_tmp = med;
  assign N_152 = out_tmp;
  end // Port_In115_Block
  endgenerate
  generate
  begin: Port_In114_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv10) // or posedge GlobalResetSel)
  begin: Port_In114_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= Port_In114;
  end // inProc
  assign out_tmp = med;
  assign N_160 = out_tmp;
  end // Port_In114_Block
  endgenerate
  generate
  begin: Port_In113_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clk) // or posedge GlobalResetSel)
  begin: Port_In113_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In113;
  end // inProc
  assign out_tmp = med;
  assign N_128 = out_tmp;
  end // Port_In113_Block
  endgenerate
  generate
  begin: Port_In112_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv10) // or posedge GlobalResetSel)
  begin: Port_In112_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= Port_In112;
  end // inProc
  assign out_tmp = med;
  assign N_184 = out_tmp;
  end // Port_In112_Block
  endgenerate
  generate
  begin: Port_In111_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clk) // or posedge GlobalResetSel)
  begin: Port_In111_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In111;
  end // inProc
  assign out_tmp = med;
  assign N_196 = out_tmp;
  end // Port_In111_Block
  endgenerate
  generate
  begin: Port_In110_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clk) // or posedge GlobalResetSel)
  begin: Port_In110_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In110;
  end // inProc
  assign out_tmp = med;
  assign N_127 = out_tmp;
  end // Port_In110_Block
  endgenerate
  generate
  begin: Port_In11_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In11_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In11;
  end // inProc
  assign out_tmp = med;
  assign N_36 = out_tmp;
  end // Port_In11_Block
  endgenerate
  generate
  begin: Port_In109_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv10) // or posedge GlobalResetSel)
  begin: Port_In109_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= Port_In109;
  end // inProc
  assign out_tmp = med;
  assign N_181 = out_tmp;
  end // Port_In109_Block
  endgenerate
  generate
  begin: Port_In108_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clk) // or posedge GlobalResetSel)
  begin: Port_In108_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In108;
  end // inProc
  assign out_tmp = med;
  assign N_157 = out_tmp;
  end // Port_In108_Block
  endgenerate
  generate
  begin: Port_In107_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv10) // or posedge GlobalResetSel)
  begin: Port_In107_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= Port_In107;
  end // inProc
  assign out_tmp = med;
  assign N_178 = out_tmp;
  end // Port_In107_Block
  endgenerate
  generate
  begin: Port_In106_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clk) // or posedge GlobalResetSel)
  begin: Port_In106_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In106;
  end // inProc
  assign out_tmp = med;
  assign N_156 = out_tmp;
  end // Port_In106_Block
  endgenerate
  generate
  begin: Port_In105_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv10) // or posedge GlobalResetSel)
  begin: Port_In105_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= Port_In105;
  end // inProc
  assign out_tmp = med;
  assign N_175 = out_tmp;
  end // Port_In105_Block
  endgenerate
  generate
  begin: Port_In104_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clk) // or posedge GlobalResetSel)
  begin: Port_In104_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In104;
  end // inProc
  assign out_tmp = med;
  assign N_126 = out_tmp;
  end // Port_In104_Block
  endgenerate
  generate
  begin: Port_In103_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv10) // or posedge GlobalResetSel)
  begin: Port_In103_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= Port_In103;
  end // inProc
  assign out_tmp = med;
  assign N_142 = out_tmp;
  end // Port_In103_Block
  endgenerate
  generate
  begin: Port_In102_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv10) // or posedge GlobalResetSel)
  begin: Port_In102_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= Port_In102;
  end // inProc
  assign out_tmp = med;
  assign N_172 = out_tmp;
  end // Port_In102_Block
  endgenerate
  generate
  begin: Port_In101_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clk) // or posedge GlobalResetSel)
  begin: Port_In101_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In101;
  end // inProc
  assign out_tmp = med;
  assign N_195 = out_tmp;
  end // Port_In101_Block
  endgenerate
  generate
  begin: Port_In100_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In100_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In100;
  end // inProc
  assign out_tmp = med;
  assign N_125 = out_tmp;
  end // Port_In100_Block
  endgenerate
  generate
  begin: Port_In10_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In10_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In10;
  end // inProc
  assign out_tmp = med;
  assign N_34 = out_tmp;
  end // Port_In10_Block
  endgenerate
  generate
  begin: Port_In1_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv100) // or posedge GlobalResetSel)
  begin: Port_In1_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable100==1)
      med <= Port_In1;
  end // inProc
  assign out_tmp = med;
  assign N_25 = out_tmp;
  end // Port_In1_Block
  endgenerate
  generate
  begin: Port_In_block
    wire [31:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [31:0] med;
  always @(posedge clkDiv10) // or posedge GlobalResetSel)
  begin: Port_In_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable10==1)
      med <= Port_In;
  end // inProc
  assign out_tmp = med;
  assign N_35 = out_tmp;
  end // Port_In_Block
  endgenerate
  generate
  begin: Mux_block
    wire [31:0] med  [9:0];
    reg [31:0] tmpOut;
    assign med[0] = $signed(N_14) ;
    assign med[1] = $signed(N_15) ;
    assign med[2] = $signed(N_16) ;
    assign med[3] = $signed(N_17) ;
    assign med[4] = $signed(N_18) ;
    assign med[5] = $signed(N_19) ;
    assign med[6] = $signed(N_20) ;
    assign med[7] = $signed(N_21) ;
    assign med[8] = $signed(N_22) ;
    assign med[9] = $signed(N_23) ;

    always@(*)
    begin
      if(N_11[31:16] >= 10)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_11[31:16]];
    end

    assign N_24 = tmpOut;
  end // Mux_Block
  endgenerate
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(7891) ) Delay9_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_181), .outp(N_179) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(7891) ) Delay8_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_178), .outp(N_176) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(7891) ) Delay7_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_175), .outp(N_173) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(7891) ) Delay6_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_172), .outp(N_170) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(7891) ) Delay5_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_169), .outp(N_167) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(7891) ) Delay4_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_166), .outp(N_164) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(7891) ) Delay3_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_163), .outp(N_161) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(7891) ) Delay21_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_13), .outp(N_11) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(92) ) Delay20_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_10), .outp(N_23) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(7891) ) Delay2_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_160), .outp(N_158) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(82) ) Delay19_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_9), .outp(N_22) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(72) ) Delay18_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_8), .outp(N_21) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(62) ) Delay17_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_7), .outp(N_20) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(52) ) Delay16_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_6), .outp(N_19) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(42) ) Delay15_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_5), .outp(N_18) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(32) ) Delay14_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_4), .outp(N_17) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(22) ) Delay13_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_3), .outp(N_16) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(12) ) Delay12_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_2), .outp(N_15) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(2) ) Delay11_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_1), .outp(N_14) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(7891) ) Delay10_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_184), .outp(N_182) );
    synDelayWithEnable #( .bitwidth(32), .preferRAMImpl(2), .delaylength(7891) ) Delay1_block ( .clk(clkDiv10), .en(GlobalEnable10), .grst(GlobalResetSel), .rst(1'b0), .inp(N_142), .outp(N_140) );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

